01 Question: 9935번

상근이는 문자열에 폭발 문자열을 심어 놓았다. 폭발 문자열이 폭발하면 그 문자는 문자열에서 사라지며, 남은 문자열은 합쳐지게 된다.

폭발은 다음과 같은 과정으로 진행된다.

문자열이 폭발 문자열을 포함하고 있는 경우에, 모든 폭발 문자열이 폭발하게 된다. 남은 문자열을 순서대로 이어 붙여 새로운 문자열을 만든다.
새로 생긴 문자열에 폭발 문자열이 포함되어 있을 수도 있다.
폭발은 폭발 문자열이 문자열에 없을 때까지 계속된다.
상근이는 모든 폭발이 끝난 후에 어떤 문자열이 남는지 구해보려고 한다. 남아있는 문자가 없는 경우가 있다. 이때는 "FRULA"를 출력한다.

폭발 문자열은 같은 문자를 두 개 이상 포함하지 않는다.
----------------------------------------------------------------------------
01 MySolution: 9935번

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
 
bool check[200000];
int Count[200000];
vector<int> graph[200000];
int first = 1;
 
void dfs(int start){
    if(check[start]){
        return;
    }
    check[start] = true;
    Count[start] = first;
    first++;
 
    sort(graph[start].begin(),graph[start].end());
    for(int i = 0;i<graph[start].size();i++){
        int y = graph[start][i];
        dfs(y);
    }
}
 
int main(void){
    int n,m,First;
    cin >> n >> m >> First;
    for(int i = 0;i<m;i++){
        int a,b;
        cin >> a >> b;
        graph[a].push_back(b);
        graph[b].push_back(a);
    }
    dfs(First);
    for(int i = 1;i<=n;i++){
        cout << Count[i] << '\n';
    }
}


----------------------------------------------------------------------------
----------------------------------------------------------------------------

02 Question: 24480번

오늘도 서준이는 깊이 우선 탐색(DFS) 수업 조교를 하고 있다. 아빠가 수업한 내용을 학생들이 잘 이해했는지 문제를 통해서 확인해보자.

N개의 정점과 M개의 간선으로 구성된 무방향 그래프(undirected graph)가 주어진다. 정점 번호는 1번부터 N번이고 모든 간선의 가중치는 1이다. 정점 R에서 시작하여 깊이 우선 탐색으로 노드를 방문할 경우 노드의 방문 순서를 출력하자.

깊이 우선 탐색 의사 코드는 다음과 같다. 인접 정점은 내림차순으로 방문한다.

dfs(V, E, R) {  # V : 정점 집합, E : 간선 집합, R : 시작 정점
    visited[R] <- YES;  # 시작 정점 R을 방문 했다고 표시한다.
    for each x ∈ E(R)  # E(R) : 정점 R의 인접 정점 집합.(정점 번호를 내림차순으로 방문한다)
        if (visited[x] = NO) then dfs(V, E, x);
}
----------------------------------------------------------------------------
02 MySolution: 24480번

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

vector<int> graph[100001];
bool visited[100001] = {false};
int result[100001] = {0};
int cnt = 0;

void dfs(int R)
{
    if (visited[R])
    {
        return;
    }
    visited[R] = true;
    cnt++;
    result[R] = cnt;
    for (int i = 0; i < graph[R].size(); i++)
    {
        dfs(graph[R][i]);
    }
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int N, M, R, tempX, tempY;
    cin >> N >> M >> R;
    for (int i = 0; i < M; i++)
    {
        cin >> tempX >> tempY;
        graph[tempX].push_back(tempY);
        graph[tempY].push_back(tempX);
    }
    for (int i = 1; i <= N; i++)
    {
        sort(graph[i].begin(), graph[i].end(), greater<int>());
    }
    dfs(R);

    for (int i = 1; i <= N; i++)
    {
        cout << result[i] << '\n';
    }
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------
