01 Question: 24416번

오늘도 서준이는 동적 프로그래밍 수업 조교를 하고 있다. 아빠가 수업한 내용을 학생들이 잘 이해했는지 문제를 통해서 확인해보자.

오늘은 n의 피보나치 수를 재귀호출과 동적 프로그래밍으로 구하는 알고리즘을 배웠다. 재귀호출에 비해 동적 프로그래밍이 얼마나 빠른지 확인해 보자. 아래 의사 코드를 이용하여 n의 피보나치 수를 구할 경우 코드1 코드2 실행 횟수를 출력하자.

피보나치 수 재귀호출 의사 코드는 다음과 같다.

fib(n) {
    if (n = 1 or n = 2)
    then return 1;  # 코드1
    else return (fib(n - 1) + fib(n - 2));
}
피보나치 수 동적 프로그래밍 의사 코드는 다음과 같다.

fibonacci(n) {
    f[1] <- f[2] <- 1;
    for i <- 3 to n
        f[i] <- f[i - 1] + f[i - 2];  # 코드2
    return f[n];
}
----------------------------------------------------------------------------
01 MySolution: 24416번

#include <iostream>
using namespace std;

int arr[41] = {0};
int n, cnt1 = 0, cnt2 = 0;

int fib(int N) {
    if (N == 1 || N == 2) {
      cnt1++;
      return 1;  
    }
    else return (fib(N - 1) + fib(N - 2));
}

int main(){
  
  cin>>n;
  
  fib(n);
  
  arr[1] = arr[2] = 1;
  for(int i=3;i<=n;i++){
    arr[i] = arr[i-1] + arr[i-2];
    cnt2++;
  }
  cout<<cnt1<<" "<<cnt2;
  return 0;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

02 Question: 9184번

재귀 호출만 생각하면 신이 난다! 아닌가요?

다음과 같은 재귀함수 w(a, b, c)가 있다.

if a <= 0 or b <= 0 or c <= 0, then w(a, b, c) returns:
    1

if a > 20 or b > 20 or c > 20, then w(a, b, c) returns:
    w(20, 20, 20)

if a < b and b < c, then w(a, b, c) returns:
    w(a, b, c-1) + w(a, b-1, c-1) - w(a, b-1, c)

otherwise it returns:
    w(a-1, b, c) + w(a-1, b-1, c) + w(a-1, b, c-1) - w(a-1, b-1, c-1)
위의 함수를 구현하는 것은 매우 쉽다. 하지만, 그대로 구현하면 값을 구하는데 매우 오랜 시간이 걸린다. (예를 들면, a=15, b=15, c=15)

a, b, c가 주어졌을 때, w(a, b, c)를 출력하는 프로그램을 작성하시오.
----------------------------------------------------------------------------
02 MySolution: 9184번

#include <iostream>

int store[21][21][21];

int solve(int a, int b, int c);

int main(void)
{
	std::ios::sync_with_stdio(false);
	std::cin.tie(NULL);
	std::cout.tie(NULL);

	int a, b, c;
	while (true)
	{
		std::cin >> a >> b >> c;
		
		if (a == -1 && b == -1 && c == -1)
			break;

		std::cout << "w(" << a << ", " << b << ", " << c << ") = " << solve(a, b, c) << '\n';
	}
}

int solve(int a, int b, int c)
{
	if (a <= 0 || b <= 0 || c <= 0)
		return 1;

	if (a > 20 || b > 20 || c > 20)
		return solve(20, 20, 20);

	if (store[a][b][c])
		return store[a][b][c];

	if (a < b && b < c)
	{
		store[a][b][c] = solve(a, b, c - 1) + solve(a, b - 1, c - 1) - solve(a, b - 1, c);
		return store[a][b][c];
	}

	store[a][b][c] = solve(a - 1, b, c) + solve(a - 1, b - 1, c) + solve(a - 1, b, c - 1) - solve(a - 1, b - 1, c - 1);
	return store[a][b][c];
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

03 Question: 1904번

지원이에게 2진 수열을 가르쳐 주기 위해, 지원이 아버지는 그에게 타일들을 선물해주셨다. 그리고 이 각각의 타일들은 0 또는 1이 쓰여 있는 낱장의 타일들이다.

어느 날 짓궂은 동주가 지원이의 공부를 방해하기 위해 0이 쓰여진 낱장의 타일들을 붙여서 한 쌍으로 이루어진 00 타일들을 만들었다. 결국 현재 1 하나만으로 이루어진 타일 또는 0타일을 두 개 붙인 한 쌍의 00타일들만이 남게 되었다.

그러므로 지원이는 타일로 더 이상 크기가 N인 모든 2진 수열을 만들 수 없게 되었다. 예를 들어, N=1일 때 1만 만들 수 있고, N=2일 때는 00, 11을 만들 수 있다. (01, 10은 만들 수 없게 되었다.) 또한 N=4일 때는 0011, 0000, 1001, 1100, 1111 등 총 5개의 2진 수열을 만들 수 있다.

우리의 목표는 N이 주어졌을 때 지원이가 만들 수 있는 모든 가짓수를 세는 것이다. 단 타일들은 무한히 많은 것으로 가정하자.
----------------------------------------------------------------------------
03 MySolution: 1904번

#include <iostream> 
#define mod 15746

using namespace std;

int main(){

	int n;
	cin >> n;
	int dp[n+1];
	
	// 타일은 00 , 1 
	
	dp[1] = 1 % mod; // 1
	dp[2] = 2 % mod; // 00 1+1
	// dp[3] = 3; // 00+1 1+00 1+1+1
	// dp[4] = 5; // 00+00 00+1+1 1+1+00 1+1+1+1 1+00+1
	// dp[5] = 8;// 00+00+1 00+1+00 1+00+00 1+1+1+00 1+1+00+1 1+00+1+1 00+1+1+1 1+1+1+1+1
	
	for(int i=3; i<=n; i++){
		dp[i] = (dp[i-2] + dp[i-1]) % mod ;
	}
	
	cout << dp[n] << "\n";
	
    return 0;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------
