01 Question: 3584번

루트가 있는 트리(rooted tree)가 주어지고, 그 트리 상의 두 정점이 주어질 때 그들의 가장 가까운 공통 조상(Nearest Common Ancestor)은 다음과 같이 정의됩니다.

두 노드의 가장 가까운 공통 조상은, 두 노드를 모두 자손으로 가지면서 깊이가 가장 깊은(즉 두 노드에 가장 가까운) 노드를 말합니다.
nca.png

예를 들어 15와 11를 모두 자손으로 갖는 노드는 4와 8이 있지만, 그 중 깊이가 가장 깊은(15와 11에 가장 가까운) 노드는 4 이므로 가장 가까운 공통 조상은 4가 됩니다.

루트가 있는 트리가 주어지고, 두 노드가 주어질 때 그 두 노드의 가장 가까운 공통 조상을 찾는 프로그램을 작성하세요
----------------------------------------------------------------------------
01 MySolution: 3584번

#include<iostream>
#include<algorithm>
using namespace std;

int parent[10001];
bool visit[10001];
int T, N, A, B, u, v;

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	cin >> T;

	while (T--)
	{
		cin >> N;

		for (int i = 1; i <= N; i++)
		{
			visit[i] = false;
			parent[i] = i;
		}

		for (int i = 0; i < N - 1; i++)
		{
			cin >> A >> B;
			parent[B] = A;
		}

		cin >> u >> v;
		visit[u] = true;

		while (u != parent[u])
		{
			u = parent[u];
			visit[u] = true;
		}
		while (true)
		{
			if (visit[v])
			{
				cout << v << '\n';
				break;
			}
			v = parent[v];
		}
		
	}
}
----------------------------------------------------------------------------
----------------------------------------------------------------------------

02 Question: 17435번

함수 f : {1, 2, ..., m}→{1, 2, ..., m}이 있다. 이때 fn : {1, 2, ..., m}→{1, 2, ..., m}을 다음과 같이 정의하자.

f1(x) = f(x)
fn+1(x) = f(fn(x))
예를 들어 f4(1) = f(f(f(f(1))))이다.

n과 x가 주어질 때 fn(x)를 계산하는 쿼리를 수행하는 프로그램을 작성하시오.
----------------------------------------------------------------------------
02 MySolution: 17435번

#include<iostream>
#include<vector>
#include<algorithm>

using namespace std;

int m;
int Q;
int n, x;
int f[200001];
#define max_log 20
int table[21][200001];

void init()
{
	cin >> m;
	for (int i = 1; i <= m; i++) {
		int num;
		cin >> num;
		f[i] = num;
	}

	for (int i = 1; i <= m; i++)
		table[0][i] = f[i];

	for (int i = 1; i < max_log; i++) {
		for (int j = 1; j <= m; j++) {
			int tmp = table[i - 1][j];
			table[i][j] = table[i - 1][tmp];
		}
	}
}


int solve(int n, int x)
{
	int cur = x;
	for (int k = 0; k < max_log; k++) {
		if (n & (1 << k)) {
			cur = table[k][cur];
		}
	}
	return cur;
}

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	init();

	cin >> Q;
	while (Q--) {
		cin >> n >> x;
		
		int res = solve(n, x);
		cout << res << '\n';
	}
}
----------------------------------------------------------------------------
----------------------------------------------------------------------------

03 Question: 11438번

N(2 ≤ N ≤ 100,000)개의 정점으로 이루어진 트리가 주어진다. 트리의 각 정점은 1번부터 N번까지 번호가 매겨져 있으며, 루트는 1번이다.

두 노드의 쌍 M(1 ≤ M ≤ 100,000)개가 주어졌을 때, 두 노드의 가장 가까운 공통 조상이 몇 번인지 출력한다.
----------------------------------------------------------------------------
03 MySolution: 11438번

#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <utility>

using namespace std;
#define PMAX 25
#define MAX 100001

vector<int> adj[MAX];
int d[MAX] = { 0, };
int p[MAX][PMAX] = { 0, };

void bfs(int s) {
	queue<int> q;
	q.push(s);
	d[s] = 1;
	p[s][0] = -1;
	while (!q.empty()) {
		int cur = q.front();
		q.pop();
		for (int i = 0; i < adj[cur].size(); i++) {
			int nxt = adj[cur][i];
			if (d[nxt] == 0) {
				p[nxt][0] = cur;
				d[nxt] = d[cur] + 1;
				q.push(nxt);
			}
		}
	}
}

void getP(int n) {
	for (int j = 1; (1 << j) < n; j++) {
		for (int i = 1; i <= n; i++) {
			if (p[i][j - 1] != 0) p[i][j] = p[p[i][j - 1]][j - 1];
		}
	}
}

int LCA(int a, int b) {
	if (d[a] < d[b])
		swap(a, b);
	if (d[a] != d[b])
		for (int j = PMAX; j >= 0; --j)
			if (d[a] - (1 << j) >= d[b])
				a = p[a][j];
	if (a == b)
		return a;
	else {
		for (int j = PMAX; j >= 0; --j) {
			if (d[a] - (1 << j) >= 0 && p[a][j] != p[b][j]) {
				a = p[a][j];
				b = p[b][j];
			}
		}
	}
	return p[a][0];
}
int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);
	int N, M, a, b;
	cin >> N;
	for (int i = 0; i < N - 1; i++) {
		cin >> a >> b;
		adj[a].push_back(b);
		adj[b].push_back(a);
	}
	bfs(1);
	getP(N);
	cin >> M;
	while (M--) {
		cin >> a >> b;
		cout << LCA(a, b) << "\n";
	}
}
----------------------------------------------------------------------------
----------------------------------------------------------------------------

04 Question: 3176번

N개의 도시와 그 도시를 연결하는 N-1개의 도로로 이루어진 도로 네트워크가 있다. 

모든 도시의 쌍에는 그 도시를 연결하는 유일한 경로가 있고, 각 도로의 길이는 입력으로 주어진다.

총 K개의 도시 쌍이 주어진다. 이때, 두 도시를 연결하는 경로 상에서 가장 짧은 도로의 길이와 가장 긴 도로의 길이를 구하는 프로그램을 작성하시오.
----------------------------------------------------------------------------
04 MySolution: 3176번

#include <cstdio>
#include <algorithm>
#include <vector>

using namespace std;

const int nMAX = 100001;
const int iMAX = 17;

int N;
vector<pair<int, int>> adj[nMAX];

bool visited[nMAX];

int minLength[nMAX][iMAX];
int maxLength[nMAX][iMAX];
int parent[nMAX][iMAX];
int depth[nMAX];

void dfs(int start, int n){
	visited[start] = true;
	depth[start] = n;
	for(int i=0; i<adj[start].size(); i++){
		int next = adj[start][i].first;
		int weight = adj[start][i].second;
		
		if(visited[next]) continue;

		parent[next][0] = start;

		minLength[next][0] = weight;
		maxLength[next][0] = weight;
		dfs(next, n+1);
	}
}

void connect(){
	for(int p=1; p<iMAX; p++){
		for(int cur=1; cur<=N; cur++){
			int prevParent = parent[cur][p-1];
			parent[cur][p] = parent[prevParent][p-1];
			
			if(parent[prevParent][p-1] == 0) continue;
			
			int prevMin = minLength[prevParent][p-1];
			int prevMax = maxLength[prevParent][p-1];

			int curMin = minLength[cur][p-1];
			int curMax = maxLength[cur][p-1];

			minLength[cur][p] = min(prevMin, curMin);
			maxLength[cur][p] = max(prevMax, curMax);
		}
	}
}

pair<int, int> LCA(int xNode, int yNode){
	if(depth[xNode] > depth[yNode]){
		int temp = xNode;
		xNode = yNode;
		yNode = temp;
	}
	int mins = 1000001;
	int maxs = -1;

	for(int i=iMAX-1; i>=0; i--){
		int jump = 1 << i;
		if(depth[yNode] - depth[xNode] >= jump){

			mins = min(mins, minLength[yNode][i]);
			maxs = max(maxs, maxLength[yNode][i]);
			yNode = parent[yNode][i];
		}
	}

	if(xNode == yNode) return {mins, maxs};
	for(int i=iMAX-1; i>=0; i--){
		if(parent[xNode][i] == parent[yNode][i]) continue;
		
		mins = min(mins, min(minLength[xNode][i], minLength[yNode][i]));
		maxs = max(maxs, max(maxLength[xNode][i], maxLength[yNode][i]));
		
		xNode = parent[xNode][i];
		yNode = parent[yNode][i];
	}
	mins = min(mins, min(minLength[xNode][0], minLength[yNode][0]));
	maxs = max(maxs, max(maxLength[xNode][0], maxLength[yNode][0]));

	return {mins, maxs};
}

int main() {
	scanf("%d", &N);
	for(int i=0; i<N-1; i++) {
		int A, B, C;
		scanf("%d%d%d", &A, &B, &C);

		adj[A].push_back({B, C});
		adj[B].push_back({A, C});
	}

	int K;
	scanf("%d", &K);
	vector<pair<int, int>> ans(K);
	for(int i=0; i<K; i++) {
		int D, E;
		scanf("%d%d", &D, &E);
		ans[i] = {D, E};
	}

	dfs(1, 0);
	connect();

	for(int i=0; i<K; i++) {
		int x = ans[i].first;
		int y = ans[i].second;

		pair<int, int> ans = LCA(x, y);
		printf("%d %d\n", ans.first, ans.second);
	}
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

05 Question: 13511번

N개의 정점으로 이루어진 트리(무방향 사이클이 없는 연결 그래프)가 있다. 정점은 1번부터 N번까지 번호가 매겨져 있고, 간선은 1번부터 N-1번까지 번호가 매겨져 있다.

아래의 두 쿼리를 수행하는 프로그램을 작성하시오.

1 u v: u에서 v로 가는 경로의 비용을 출력한다.
2 u v k: u에서 v로 가는 경로에 존재하는 정점 중에서 k번째 정점을 출력한다. k는 u에서 v로 가는 경로에 포함된 정점의 수보다 작거나 같다.
----------------------------------------------------------------------------
05 MySolution: 13511번

#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair<ll, ll> p;

vector<p> g[101010];
ll dp[101010][22];
ll dist[101010];
ll dep[101010];
ll n;
bool chk[101010];

void dfs(ll now, ll d, ll c){
	chk[now] = 1;
	dep[now] = d;
	dist[now] = c;
	for(auto i : g[now]){
		ll nxt = i.first;
		if(chk[nxt]) continue;
		ll nxtCost = i.second + c;
		dp[nxt][0] = now;
		dfs(nxt, d+1, nxtCost);
	}
}

void make(){
	for(int j=1; j<22; j++){
		for(int i=1; i<=n; i++){
			dp[i][j] = dp[dp[i][j-1]][j-1];
		}
	}
}

ll getLca(ll u, ll v){
	if(dep[u] > dep[v]) swap(u, v);
	ll diff = dep[v] - dep[u];
	for(int i=0; diff; i++){
		if(diff & 1) v = dp[v][i];
		diff >>= 1;
	}
	if(u == v) return u;
	for(int i=21; i>=0; i--){
		if(dp[u][i] != dp[v][i]) u = dp[u][i], v = dp[v][i];
	}
	return dp[u][0];
}

ll getDist(ll u, ll v){
	ll lca = getLca(u, v);
	return dist[u] + dist[v] - 2*dist[lca];
}

ll getkth(ll u, ll v, ll k){
	ll lca = getLca(u, v);
	ll diff = dep[u] - dep[lca];
	k--;
	if(diff >= k){
		for(int i=0; k; i++){
			if(k & 1) u = dp[u][i];
			k >>= 1;
		}
		return u;
	}

	k = dep[v] - dep[lca] + diff - k;
	for(int i=0; k; i++){
		if(k & 1) v = dp[v][i];
		k >>= 1;
	}
	return v;
}

int main(){
	ios_base::sync_with_stdio(0); cin.tie(0);
	cin >> n;
	for(int i=1; i<n; i++){
		ll s, e, x; cin >> s >> e >> x;
		g[s].push_back({e, x});
		g[e].push_back({s, x});
	}
	dfs(1, 1, 0); make();

	int m; cin >> m;
	while(m--){
		int op; cin >> op;
		if(op == 1){
			ll a, b; cin >> a >> b;
			cout << getDist(a, b) << "\n";
		}else{
			ll a, b, c; cin >> a >> b >> c;
			cout << getkth(a, b, c) << "\n";

		}
	}
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------
