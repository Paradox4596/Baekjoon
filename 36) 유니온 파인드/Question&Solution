01 Question: 1717번

초기에 {0}, {1}, {2}, ... {n} 이 각각 n+1개의 집합을 이루고 있다. 여기에 합집합 연산과, 두 원소가 같은 집합에 포함되어 있는지를 확인하는 연산을 수행하려고 한다.

집합을 표현하는 프로그램을 작성하시오.
----------------------------------------------------------------------------
01 MySolution: 1717번

#include<iostream>
#include<vector>

using namespace std;
int n, m;
int parent[1000001];

int getParent(int x) {
    if (parent[x] == x) return x;
    return parent[x] = getParent(parent[x]);
}
void unionParent(int a, int b) {
    a = getParent(a);
    b = getParent(b);
    if (a > b) parent[a] = b;
    else parent[b] = a;
}
void findParent(int a, int b) {
    a = getParent(a);
    b = getParent(b);
    if (a == b) cout << "YES\n";
    else cout << "NO\n";
}


int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cin >> n >> m;
    for (int i = 1; i <= n; i++) {
        parent[i] = i;
    }
    for (int i = 0; i < m; i++) {
        int o, a, b;
        cin >> o >> a >> b;
        if (!o) {
            unionParent(a, b);
        }
        else {
            findParent(a, b);
        }

    }

    return 0;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

02 Question: 1976번

동혁이는 친구들과 함께 여행을 가려고 한다. 한국에는 도시가 N개 있고 임의의 두 도시 사이에 길이 있을 수도, 없을 수도 있다. 동혁이의 여행 일정이 주어졌을 때, 이 여행 경로가 가능한 것인지 알아보자. 물론 중간에 다른 도시를 경유해서 여행을 할 수도 있다. 예를 들어 도시가 5개 있고, A-B, B-C, A-D, B-D, E-A의 길이 있고, 동혁이의 여행 계획이 E C B C D 라면 E-A-B-C-B-C-B-D라는 여행경로를 통해 목적을 달성할 수 있다.

도시들의 개수와 도시들 간의 연결 여부가 주어져 있고, 동혁이의 여행 계획에 속한 도시들이 순서대로 주어졌을 때 가능한지 여부를 판별하는 프로그램을 작성하시오. 같은 도시를 여러 번 방문하는 것도 가능하다.
----------------------------------------------------------------------------
02 MySolution: 1976번

#include <vector>
#include <algorithm>
#include <iostream>
using namespace std;

int N, M;
int parent[201], travel[1001];
bool res = true;


int getParent(int x) {
	if (parent[x] == x) return x;
	return parent[x] = getParent(parent[x]);
}


void unionParent(int a, int b) {
	a = getParent(a);
	b = getParent(b);
	if (a > b) parent[a] = b;
	else parent[b] = a;
}


void findParent(int a, int b) {
	a = getParent(a);
	b = getParent(b);
	if (a != b) res = false;
}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);

	cin >> N >> M;
	for (int i = 1; i <= N;i++) {
		parent[i] = i;
	}

	int num;
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= N; j++) {
			cin >> num;
			if (num == 1) unionParent(i, j);
		}
	}
	for (int i = 0; i < M; i++) {
		cin >> travel[i];
	}
	for(int i = 0; i < M - 1; i++){
		findParent(travel[i], travel[i + 1]);
	}
	if (res) cout << "YES";
	else cout << "NO";
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

03 Question: 4195번

민혁이는 소셜 네트워크 사이트에서 친구를 만드는 것을 좋아하는 친구이다. 우표를 모으는 취미가 있듯이, 민혁이는 소셜 네트워크 사이트에서 친구를 모으는 것이 취미이다.

어떤 사이트의 친구 관계가 생긴 순서대로 주어졌을 때, 두 사람의 친구 네트워크에 몇 명이 있는지 구하는 프로그램을 작성하시오.

친구 네트워크란 친구 관계만으로 이동할 수 있는 사이를 말한다.
----------------------------------------------------------------------------
03 MySolution: 4195번

#include<iostream>
#include<vector>
#include<algorithm>
#include<map>
#include<string>

using namespace std;

int parent[200001];
int nfriend[200001];
map<string, int> m;

int getParent(int x) {
    if (parent[x] == x) return x;
    return parent[x] = getParent(parent[x]);
}
void unionParent(int a, int b) {
    a = getParent(a);
    b = getParent(b);
	if (a > b)
	{
		parent[a] = b;
		nfriend[b] += nfriend[a];
	}
	else if (a < b)
	{
		parent[b] = a;
		nfriend[a] += nfriend[b];
	}
}

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int T, count;
	map<string, int> ::iterator it;
	cin >> T;

	for (int i = 0; i < T; i++)
	{
		m.clear();
		count = 0;
		for (int i = 0; i < 200001; i++) {
			parent[i] = i;
			nfriend[i] = 1;
		}

		string str1, str2;
		int F, a, b;
		cin >> F;

		for (int j = 0; j < F; j++)
		{
			cin >> str1 >> str2;
			it = m.find(str1);
			if (it == m.end()) {
				m[str1] = ++count;
				a = count;
			}
			else 
				a = it->second;

			it = m.find(str2);
			if (it == m.end()) {
				m[str2] = ++count;
				b = count;
			}
			else b = it->second;
			unionParent(a, b);
			int root = getParent(a);
			cout << nfriend[root] << '\n';
		}
	}
	return 0;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

04 Question: 20040번

사이클 게임은 두 명의 플레이어가 차례대로 돌아가며 진행하는 게임으로, 선 플레이어가 홀수 번째 차례를, 후 플레이어가 짝수 번째 차례를 진행한다. 게임 시작 시 0 부터 n − 1 까지 고유한 번호가 부여된 평면 상의 점 n 개가 주어지며, 이 중 어느 세 점도 일직선 위에 놓이지 않는다. 매 차례 마다 플레이어는 두 점을 선택해서 이를 연결하는 선분을 긋는데, 이전에 그린 선분을 다시 그을 수는 없지만 이미 그린 다른 선분과 교차하는 것은 가능하다. 게임을 진행하다가 처음으로 사이클을 완성하는 순간 게임이 종료된다. 사이클 C는 플레이어가 그린 선분들의 부분집합으로, 다음 조건을 만족한다.

C에 속한 임의의 선분의 한 끝점에서 출발하여 모든 선분을 한 번씩만 지나서 출발점으로 되돌아올 수 있다.

문제는 선분을 여러 개 그리다 보면 사이클이 완성 되었는지의 여부를 판단하기 어려워 이미 사이클이 완성되었음에도 불구하고 게임을 계속 진행하게 될 수 있다는 것이다. 이 문제를 해결하기 위해서 게임의 진행 상황이 주어지면 몇 번째 차례에서 사이클이 완성되었는지, 혹은 아직 게임이 진행 중인지를 판단하는 프로그램을 작성하려 한다.

입력으로 점의 개수 n과 m 번째 차례까지의 게임 진행 상황이 주어지면 사이클이 완성 되었는지를 판단하고, 완성되었다면 몇 번째 차례에서 처음으로 사이클이 완성된 것인지를 출력하는 프로그램을 작성하시오.
----------------------------------------------------------------------------
04 MySolution: 20040번

#include <iostream>
using namespace std;
int N, M;
int parent[1000001];

int find(int a)
{
	if (parent[a] == a)
		return a;

	return parent[a]=find(parent[a]);
}

void Union(int a, int b)
{
	a = find(parent[a]);
	b = find(parent[b]);

	if (a != b)
	{
		if (a >= b)
			parent[a] = b;
		else
			parent[b] = a;
	}
}

bool Parent(int a, int b)
{
	a = find(a);
	b = find(b);
	if (a != b)
		return false;
	return true;
}
int main(void)
{
	cin.tie(0);
	cout.tie(0);
	ios_base::sync_with_stdio(false);

	cin >> N >> M;
	for (int i = 0; i < N; i++)
		parent[i] = i;

	int a, b;
	for (int i = 0; i < M; i++)
	{
		cin >> a >> b;	
		if (Parent(a, b))
		{
			cout << i + 1;
			return 0;
		}
		Union(a, b);
	}
	cout << "0";
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------
