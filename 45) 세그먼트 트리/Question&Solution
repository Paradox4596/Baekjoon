01 Question: 2042번

어떤 N개의 수가 주어져 있다. 그런데 중간에 수의 변경이 빈번히 일어나고 그 중간에 어떤 부분의 합을 구하려 한다. 만약에 1,2,3,4,5 라는 수가 있고, 3번째 수를 6으로 바꾸고 2번째부터 5번째까지 합을 구하라고 한다면 17을 출력하면 되는 것이다. 그리고 그 상태에서 다섯 번째 수를 2로 바꾸고 3번째부터 5번째까지 합을 구하라고 한다면 12가 될 것이다.
----------------------------------------------------------------------------
01 MySolution: 2042번

#include <iostream>
#include <vector>
#include <math.h>

#define MAX 1000000

using namespace std;
int n, m, k;

long long arr[MAX];
long long makeSegmentTree(vector<long long> &segmentTree, int node, int start, int end) {
	if (start == end) {
		return segmentTree[node] = arr[start];
	}
	int mid = (start + end) / 2;

	return segmentTree[node] = makeSegmentTree(segmentTree, node * 2, start, mid) + makeSegmentTree(segmentTree, node * 2 + 1, mid+1, end);
	
}

void updateSegmentTree(vector<long long> &segmentTree, int node, int start, int end,int idx, long long diff) {
	if (idx<start || idx > end) return;
	segmentTree[node] += diff;
	if (start != end) {
		int mid = (start + end) / 2;
		updateSegmentTree(segmentTree, node * 2, start, mid, idx, diff);
		updateSegmentTree(segmentTree, node * 2 + 1, mid + 1, end, idx, diff);
	}
}
long long sumSegmentTree(vector<long long> &segmentTree, int node, int left, int right, int start, int end) {
	if (left>end || right<start) return 0;
	if (left <= start && right >= end) return segmentTree[node];
	int mid = (start + end) / 2;
	return sumSegmentTree(segmentTree, node * 2, left, right, start, mid) + sumSegmentTree(segmentTree, node * 2 + 1, left, right, mid+1, end);
}
int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	cin >> n >> m >> k;
	for (int i = 0; i < n; i++) {
		cin >> arr[i];
	}
	int treeDepth = ceil(log2(n));
	int treeSize = 1 << (treeDepth + 1);
	vector<long long> segmentTree(treeSize);
	
	makeSegmentTree(segmentTree,1,0,n-1);
	for (int i = 0; i < m + k; i++) {
		int order, left;
		long long right;
		cin >> order>> left >> right;
		if (order == 1) {

			updateSegmentTree(segmentTree, 1, 0, n - 1, left - 1, right-arr[left - 1]);
			arr[left - 1] = right;
		}
		else {

			cout << sumSegmentTree(segmentTree, 1, left-1, right-1, 0, n - 1)<<'\n';
		}
	}
	return 0;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

02 Question: 2042번

어떤 N개의 수가 주어져 있다. 그런데 중간에 수의 변경이 빈번히 일어나고 그 중간에 어떤 부분의 합을 구하려 한다. 만약에 1,2,3,4,5 라는 수가 있고, 3번째 수를 6으로 바꾸고 2번째부터 5번째까지 합을 구하라고 한다면 17을 출력하면 되는 것이다. 그리고 그 상태에서 다섯 번째 수를 2로 바꾸고 3번째부터 5번째까지 합을 구하라고 한다면 12가 될 것이다.
----------------------------------------------------------------------------
02 MySolution: 2042번

#include <iostream>
#include <vector>
#include <math.h>

#define MAX 1000000

using namespace std;
int n, m, k;

long long arr[MAX];
long long makeSegmentTree(vector<long long> &segmentTree, int node, int start, int end) {
	if (start == end) {
		return segmentTree[node] = arr[start];
	}
	int mid = (start + end) / 2;

	return segmentTree[node] = makeSegmentTree(segmentTree, node * 2, start, mid) + makeSegmentTree(segmentTree, node * 2 + 1, mid+1, end);
	
}

void updateSegmentTree(vector<long long> &segmentTree, int node, int start, int end,int idx, long long diff) {
	if (idx<start || idx > end) return;
	segmentTree[node] += diff;
	if (start != end) {
		int mid = (start + end) / 2;
		updateSegmentTree(segmentTree, node * 2, start, mid, idx, diff);
		updateSegmentTree(segmentTree, node * 2 + 1, mid + 1, end, idx, diff);
	}
}
long long sumSegmentTree(vector<long long> &segmentTree, int node, int left, int right, int start, int end) {
	if (left>end || right<start) return 0;
	if (left <= start && right >= end) return segmentTree[node];
	int mid = (start + end) / 2;
	return sumSegmentTree(segmentTree, node * 2, left, right, start, mid) + sumSegmentTree(segmentTree, node * 2 + 1, left, right, mid+1, end);
}
int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	cin >> n >> m >> k;
	for (int i = 0; i < n; i++) {
		cin >> arr[i];
	}
	int treeDepth = ceil(log2(n));
	int treeSize = 1 << (treeDepth + 1);
	vector<long long> segmentTree(treeSize);
	
	makeSegmentTree(segmentTree,1,0,n-1);
	for (int i = 0; i < m + k; i++) {
		int order, left;
		long long right;
		cin >> order>> left >> right;
		if (order == 1) {

			updateSegmentTree(segmentTree, 1, 0, n - 1, left - 1, right-arr[left - 1]);
			arr[left - 1] = right;
		}
		else {

			cout << sumSegmentTree(segmentTree, 1, left-1, right-1, 0, n - 1)<<'\n';
		}
	}
	return 0;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

03 Question: 2357번

N(1 ≤ N ≤ 100,000)개의 정수들이 있을 때, a번째 정수부터 b번째 정수까지 중에서 제일 작은 정수, 또는 제일 큰 정수를 찾는 것은 어려운 일이 아니다. 하지만 이와 같은 a, b의 쌍이 M(1 ≤ M ≤ 100,000)개 주어졌을 때는 어려운 문제가 된다. 이 문제를 해결해 보자.

여기서 a번째라는 것은 입력되는 순서로 a번째라는 이야기이다. 예를 들어 a=1, b=3이라면 입력된 순서대로 1번, 2번, 3번 정수 중에서 최소, 최댓값을 찾아야 한다. 각각의 정수들은 1이상 1,000,000,000이하의 값을 갖는다.
----------------------------------------------------------------------------
03 MySolution: 2357번

#include <iostream>
#include<vector>
#include<cmath>
#include<cstdio>
using namespace std;

int N,M;
const int MAXN = 100000;
int arr[MAXN+1];
vector<int> min_tree, max_tree;

void init(int node, int start, int end){
  if(start == end){
    min_tree[node] = max_tree[node] = arr[start]; 
    return;
  }else{
    init(node*2, start, (start + end)/2 );
    init(node*2 +1 , (start + end)/2 +1, end);
    min_tree[node] = min(min_tree[node*2], min_tree[node*2 +1]); 
    max_tree[node] = max(max_tree[node*2], max_tree[node*2 +1]);
    return;
  }
}

pair<int,int> findMinMAx(int node, int start, int end, int left, int right){
  if(left >end || right < start ){
    return make_pair(INT32_MAX, 0);
  }else if(left <=start && end <= right){
    return make_pair(min_tree[node],max_tree[node]);
  }else{
    pair<int,int> l,r;
    l = findMinMAx(node*2, start,(start + end)/2 , left,right);
    r = findMinMAx(node*2 +1, (start + end)/2 +1, end , left,right);
    return make_pair(min(l.first, r.first),max(l.second, r.second));
  }
}

int main(){
  scanf("%d %d",&N,&M);

  int h = (int)ceil(log2(N));
  min_tree = vector<int>(1<<(h+1));
  max_tree = vector<int>(1<<(h+1));

  for(int i=1; i<=N ; ++i)
    scanf("%d",&arr[i]);

  init(1,1,N);
  int left,right;
  pair<int,int> result;
  while(M--){
    scanf("%d %d",&left,&right);
    result = findMinMAx(1, 1, N, left, right);
    printf("%d %d\n",result.first, result.second);
  }
  return 0;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------
