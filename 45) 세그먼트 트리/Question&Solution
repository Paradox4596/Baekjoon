01 Question: 2042번

어떤 N개의 수가 주어져 있다. 그런데 중간에 수의 변경이 빈번히 일어나고 그 중간에 어떤 부분의 합을 구하려 한다. 만약에 1,2,3,4,5 라는 수가 있고, 3번째 수를 6으로 바꾸고 2번째부터 5번째까지 합을 구하라고 한다면 17을 출력하면 되는 것이다. 그리고 그 상태에서 다섯 번째 수를 2로 바꾸고 3번째부터 5번째까지 합을 구하라고 한다면 12가 될 것이다.
----------------------------------------------------------------------------
01 MySolution: 2042번

#include <iostream>
#include <vector>
#include <math.h>

#define MAX 1000000

using namespace std;
int n, m, k;

long long arr[MAX];
long long makeSegmentTree(vector<long long> &segmentTree, int node, int start, int end) {
	if (start == end) {
		return segmentTree[node] = arr[start];
	}
	int mid = (start + end) / 2;

	return segmentTree[node] = makeSegmentTree(segmentTree, node * 2, start, mid) + makeSegmentTree(segmentTree, node * 2 + 1, mid+1, end);
	
}

void updateSegmentTree(vector<long long> &segmentTree, int node, int start, int end,int idx, long long diff) {
	if (idx<start || idx > end) return;
	segmentTree[node] += diff;
	if (start != end) {
		int mid = (start + end) / 2;
		updateSegmentTree(segmentTree, node * 2, start, mid, idx, diff);
		updateSegmentTree(segmentTree, node * 2 + 1, mid + 1, end, idx, diff);
	}
}
long long sumSegmentTree(vector<long long> &segmentTree, int node, int left, int right, int start, int end) {
	if (left>end || right<start) return 0;
	if (left <= start && right >= end) return segmentTree[node];
	int mid = (start + end) / 2;
	return sumSegmentTree(segmentTree, node * 2, left, right, start, mid) + sumSegmentTree(segmentTree, node * 2 + 1, left, right, mid+1, end);
}
int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	cin >> n >> m >> k;
	for (int i = 0; i < n; i++) {
		cin >> arr[i];
	}
	int treeDepth = ceil(log2(n));
	int treeSize = 1 << (treeDepth + 1);
	vector<long long> segmentTree(treeSize);
	
	makeSegmentTree(segmentTree,1,0,n-1);
	for (int i = 0; i < m + k; i++) {
		int order, left;
		long long right;
		cin >> order>> left >> right;
		if (order == 1) {

			updateSegmentTree(segmentTree, 1, 0, n - 1, left - 1, right-arr[left - 1]);
			arr[left - 1] = right;
		}
		else {

			cout << sumSegmentTree(segmentTree, 1, left-1, right-1, 0, n - 1)<<'\n';
		}
	}
	return 0;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

02 Question: 2042번

어떤 N개의 수가 주어져 있다. 그런데 중간에 수의 변경이 빈번히 일어나고 그 중간에 어떤 부분의 합을 구하려 한다. 만약에 1,2,3,4,5 라는 수가 있고, 3번째 수를 6으로 바꾸고 2번째부터 5번째까지 합을 구하라고 한다면 17을 출력하면 되는 것이다. 그리고 그 상태에서 다섯 번째 수를 2로 바꾸고 3번째부터 5번째까지 합을 구하라고 한다면 12가 될 것이다.
----------------------------------------------------------------------------
02 MySolution: 2042번

#include <iostream>
#include <vector>
#include <math.h>

#define MAX 1000000

using namespace std;
int n, m, k;

long long arr[MAX];
long long makeSegmentTree(vector<long long> &segmentTree, int node, int start, int end) {
	if (start == end) {
		return segmentTree[node] = arr[start];
	}
	int mid = (start + end) / 2;

	return segmentTree[node] = makeSegmentTree(segmentTree, node * 2, start, mid) + makeSegmentTree(segmentTree, node * 2 + 1, mid+1, end);
	
}

void updateSegmentTree(vector<long long> &segmentTree, int node, int start, int end,int idx, long long diff) {
	if (idx<start || idx > end) return;
	segmentTree[node] += diff;
	if (start != end) {
		int mid = (start + end) / 2;
		updateSegmentTree(segmentTree, node * 2, start, mid, idx, diff);
		updateSegmentTree(segmentTree, node * 2 + 1, mid + 1, end, idx, diff);
	}
}
long long sumSegmentTree(vector<long long> &segmentTree, int node, int left, int right, int start, int end) {
	if (left>end || right<start) return 0;
	if (left <= start && right >= end) return segmentTree[node];
	int mid = (start + end) / 2;
	return sumSegmentTree(segmentTree, node * 2, left, right, start, mid) + sumSegmentTree(segmentTree, node * 2 + 1, left, right, mid+1, end);
}
int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	cin >> n >> m >> k;
	for (int i = 0; i < n; i++) {
		cin >> arr[i];
	}
	int treeDepth = ceil(log2(n));
	int treeSize = 1 << (treeDepth + 1);
	vector<long long> segmentTree(treeSize);
	
	makeSegmentTree(segmentTree,1,0,n-1);
	for (int i = 0; i < m + k; i++) {
		int order, left;
		long long right;
		cin >> order>> left >> right;
		if (order == 1) {

			updateSegmentTree(segmentTree, 1, 0, n - 1, left - 1, right-arr[left - 1]);
			arr[left - 1] = right;
		}
		else {

			cout << sumSegmentTree(segmentTree, 1, left-1, right-1, 0, n - 1)<<'\n';
		}
	}
	return 0;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

03 Question: 2357번

N(1 ≤ N ≤ 100,000)개의 정수들이 있을 때, a번째 정수부터 b번째 정수까지 중에서 제일 작은 정수, 또는 제일 큰 정수를 찾는 것은 어려운 일이 아니다. 하지만 이와 같은 a, b의 쌍이 M(1 ≤ M ≤ 100,000)개 주어졌을 때는 어려운 문제가 된다. 이 문제를 해결해 보자.

여기서 a번째라는 것은 입력되는 순서로 a번째라는 이야기이다. 예를 들어 a=1, b=3이라면 입력된 순서대로 1번, 2번, 3번 정수 중에서 최소, 최댓값을 찾아야 한다. 각각의 정수들은 1이상 1,000,000,000이하의 값을 갖는다.
----------------------------------------------------------------------------
03 MySolution: 2357번

#include <iostream>
#include<vector>
#include<cmath>
#include<cstdio>
using namespace std;

int N,M;
const int MAXN = 100000;
int arr[MAXN+1];
vector<int> min_tree, max_tree;

void init(int node, int start, int end){
  if(start == end){
    min_tree[node] = max_tree[node] = arr[start]; 
    return;
  }else{
    init(node*2, start, (start + end)/2 );
    init(node*2 +1 , (start + end)/2 +1, end);
    min_tree[node] = min(min_tree[node*2], min_tree[node*2 +1]); 
    max_tree[node] = max(max_tree[node*2], max_tree[node*2 +1]);
    return;
  }
}

pair<int,int> findMinMAx(int node, int start, int end, int left, int right){
  if(left >end || right < start ){
    return make_pair(INT32_MAX, 0);
  }else if(left <=start && end <= right){
    return make_pair(min_tree[node],max_tree[node]);
  }else{
    pair<int,int> l,r;
    l = findMinMAx(node*2, start,(start + end)/2 , left,right);
    r = findMinMAx(node*2 +1, (start + end)/2 +1, end , left,right);
    return make_pair(min(l.first, r.first),max(l.second, r.second));
  }
}

int main(){
  scanf("%d %d",&N,&M);

  int h = (int)ceil(log2(N));
  min_tree = vector<int>(1<<(h+1));
  max_tree = vector<int>(1<<(h+1));

  for(int i=1; i<=N ; ++i)
    scanf("%d",&arr[i]);

  init(1,1,N);
  int left,right;
  pair<int,int> result;
  while(M--){
    scanf("%d %d",&left,&right);
    result = findMinMAx(1, 1, N, left, right);
    printf("%d %d\n",result.first, result.second);
  }
  return 0;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

04 Question: 1517번

N개의 수로 이루어진 수열 A[1], A[2], …, A[N]이 있다. 이 수열에 대해서 버블 소트를 수행할 때, Swap이 총 몇 번 발생하는지 알아내는 프로그램을 작성하시오.

버블 소트는 서로 인접해 있는 두 수를 바꿔가며 정렬하는 방법이다. 예를 들어 수열이 3 2 1 이었다고 하자. 이 경우에는 인접해 있는 3, 2가 바뀌어야 하므로 2 3 1 이 된다. 다음으로는 3, 1이 바뀌어야 하므로 2 1 3 이 된다. 다음에는 2, 1이 바뀌어야 하므로 1 2 3 이 된다. 그러면 더 이상 바꿔야 할 경우가 없으므로 정렬이 완료된다.
----------------------------------------------------------------------------
04 MySolution: 1517번

#include <bits/stdc++.h> 
using namespace std;
const int INF = 2e9;
const int inf = 1e9;

long long sorted[500001];
vector<long long> arr;
long long ans = 0;

void merge(int left, int mid, int right) {
	int i = left;
	int j = mid + 1;
	int k = left;
	while (i <= mid && j <= right) {
		if (arr[i] <= arr[j]) {
			sorted[k] = arr[i];
			i++;
		}
		else {
			sorted[k] = arr[j];
			ans += j - k;
			j++;
		}
		k++;
	}
	if (i > mid) {
		for (int x = j; x <= right; x++) {
			sorted[k] = arr[x];
			k++;
		}
	}
	else {
		for (int x = i; x <= mid; x++) {
			sorted[k] = arr[x];
			k++;
		}
	}
	for (int x = left; x <= right; x++) {
		arr[x] = sorted[x];
	}
}

void merge_sort(int left, int right) {
	if (left >= right) return;
	int mid = (left + right) >> 1;
	merge_sort(left, mid);
	merge_sort(mid + 1, right);
	merge(left, mid, right);
}

int main(void){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	
	int n;
	cin >> n;
	for (int i = 0; i < n; i++) {
		int k;
		cin >> k;
		arr.push_back(k);
	}
	merge_sort(0, n - 1);
	cout << ans;
	return 0;
}
----------------------------------------------------------------------------
----------------------------------------------------------------------------

05 Question: 9345번

최근 유튜브와 같은 온라인 비디오 스트리밍 서비스 때문에 DVD 대여점들이 자취를 감추고 있다. 이러한 어려운 상황 속에서, DVD 대여점 주인들은 실낱같은 희망을 잡고자 인기있는 N개의 DVD들로 구성된 시리즈를 구매한다(각 DVD들은 0번부터 N-1 까지 이루어져 있다).

ACM 대여점의 주인 원주연 또한 울며 겨자먹기로 인기있는 시리즈물을 구매했고, 진열을 하기 위해 맞춤형 선반을 주문제작 하였다(맟춤제작이기 때문에 선반의 번호 또한 0번부터 N-1 까지 이루어져 있다). 주연이는 매우 정갈한 사람이기 때문에 DVD를 진열할 때 i번 DVD는 i번 선반에 진열을 한다.

이 시리즈의 열렬한 팬인 민호는 주연이네 대여점에 시리즈가 입고되었다는 소식을 듣고 찾아왔다. 시리즈물은 연속으로 봐야 흥미가 안떨어지기 때문에 민호는 L번부터 R번까지의 DVD들을 빌리려고 한다. 민호는 주연이가 매우 정갈한 성격인 것임을 알기에 주연이를 믿고 실제 DVD들의 번호를 확인하지 않고 L번 선반부터 R번 선반까지 존재하는 DVD들을 들고 카운터에 가져왔다.

그러나, 민호는 간과한 사실이 있다. 주연이네 대여점에는 진상 손님인 진일이가 찾아온다는 것이였다. 진일이는 선반 A 에 있는 DVD와 선반 B에 있는 DVD를 서로 바꿔 놓는다. 이러한 진일이의 몰상식한 행동때문에 민호와 같이 주연이를 믿고 DVD의 번호를 확인 안하는 선량한 고객들이 피해를 입는 사례들이 속출하였다. 아무 이유가 없는 묻지마 테러로 인해 가게매출이 떨어질 위기에 처하자 주연이는 진일이가 보일때마다 쫒아 냈지만, 시도때도없이 찾아오는 진일이의 진상짓을 막기에는 역부족이였다.

이러한 주연이를 보고 안타까운 마음이 든 민호는 주연이를 위해 프로그램을 작성하기로 결심을 한다. 의욕이 넘치는 민호의 마음과는 달리 실력이 따라주지 못해 프로그램의 기능은 조촐하기만 하다. 프로그램의 기능은 다음과 같다.

손님이 L번 선반부터 R번 선반까지에 있는 DVD들을 가져 왔을때 실제로 DVD가 L번부터 R번까지 있나 확인을 해 줄 수 있다.
DVD의 순서는 상관이 없다. 예를 들어 손님이 2번 선반부터 4번 선반까지에 있는 DVD를 가져왔을 때 DVD가 2, 3, 4 순서로 진열되어 있건, 4, 2, 3 순서로 진열되어 있건 상관이 없다는 얘기다. 즉 L번부터 R번까지의 DVD가 있으면 된다.
문제의 단순화를위해 고객이 DVD를 빌려가면, 그 즉시 시청한뒤 바로 반납한다고 가정한다. 또한 가져다 놓는 위치는 빌리기 전과 동일하다(4, 3, 2 순서로 진열되어 있었으면 다시 4, 3, 2 순서로 진열한다).
----------------------------------------------------------------------------
05 MySolution: 9345번

#include <stdio.h>
#include <iostream>
#include <algorithm>
#include <memory.h>
using namespace std;
 
int minTree[300000], maxTree[300000];
int N, K, T;
 
int initTree(int n)
{
    memset(minTree, 0, sizeof(minTree));
    memset(maxTree, 0, sizeof(maxTree));
 
    int bound = 1;
 
    while (bound < n)
        bound *= 2;
 
    for (int i = bound; i < bound + N; i++)
        maxTree[i] = minTree[i] = i - bound;
 
    for (int i = bound + N; i < 2 * bound; i++)
        minTree[i] = N;
 
    for (int i = bound - 1; i > 0; i--)
    {
        maxTree[i] = max(maxTree[2 * i], maxTree[2 * i + 1]);
        minTree[i] = min(minTree[2 * i], minTree[2 * i + 1]);
    }
 
    return bound;
}
void updateTree(int a, int b)
{
    swap(minTree[a], minTree[b]);
    swap(maxTree[a], maxTree[b]);
  
    int idx = a / 2;
    
    while (idx > 0)
    {
        minTree[idx] = min(minTree[idx * 2], minTree[idx * 2 + 1]);
        maxTree[idx] = max(maxTree[idx * 2], maxTree[idx * 2 + 1]);
        idx /= 2;
    }
 
    idx = b / 2;
    
    while (idx > 0)
    {
        minTree[idx] = min(minTree[idx * 2], minTree[idx * 2 + 1]);
        maxTree[idx] = max(maxTree[idx * 2], maxTree[idx * 2 + 1]);
        idx /= 2;
    }
}
int findMax(int start, int end, int idx, int left, int right)
{
    if (left > end || right < start)
        return -1;
 
    else if (start >= left && end <= right)
        return maxTree[idx];
 
    else
        return max(findMax(start, (start + end) / 2, idx * 2, left, right), 
                   findMax((start + end) / 2 + 1, end, idx * 2 + 1, left, right));
}
int findMin(int start, int end, int idx, int left, int right)
{
    if (end < left || start > right)
        return N;
 
    else if (start >= left && end <= right)
        return minTree[idx];
 
    else
        return min(findMin(start, (start + end) / 2, idx * 2, left, right), 
                   findMin((start + end) / 2 + 1, end, idx * 2 + 1, left, right));
}
bool isPossible(int left, int right, int bound)
{
	int Max = findMax(bound, 2 * bound - 1, 1, left, right);
	int Min = findMin(bound, 2 * bound - 1, 1, left, right);
 
	if (left - bound == Min && right - bound == Max)
		return true;
 
	return false;
}
int main(void)
{
    scanf("%d", &T);
 
    for (int t = 0; t < T; t++)
    {
        scanf("%d %d", &N, &K);
 
        int bound = initTree(N);
 
        for (int k = 0; k < K; k++)
        {
            int Q, A, B;
 
            scanf("%d %d %d", &Q, &A, &B);
 
            if (Q == 0)
                updateTree(bound + A, bound + B);
		
            else
            {
                if (isPossible(bound + A, bound + B, bound))
                    printf("YES\n");
 
                else
                    printf("NO\n");
            }
        }
    }
}
----------------------------------------------------------------------------
----------------------------------------------------------------------------

06 Question: 16975번

길이가 N인 수열 A1, A2, ..., AN이 주어진다. 이때, 다음 쿼리를 수행하는 프로그램을 작성하시오.

1 i j k: Ai, Ai+1, ..., Aj에 k를 더한다.
2 x: Ax 를 출력한다.
----------------------------------------------------------------------------
06 MySolution: 16975번

#include <iostream>
#include<string.h>
#include<cstdio>
using namespace std;

int arr_size;
long long tree[100001];

void update(int idx, long long num){
  for(int i= idx; i<=arr_size ; i += (i & -i))
    tree[i] += num;
}

long long sum(int idx){
  long long result =0;
  for(int i= idx; i>0 ; i -= (i & -i))
    result += tree[i];
  
  return result;
}

int main(){
  int query_num;
  long long prev_num, now_num;

  scanf("%d", &arr_size);
  memset(tree, 0 ,sizeof(tree));

  scanf("%lld", &prev_num);
  update(1,prev_num);
  for(int i=2; i<=arr_size ; ++i){
    scanf("%lld", &now_num);
    update(i, now_num - prev_num);
    prev_num =now_num;
  }

  scanf("%d", &query_num);

  int num,i,j,x;
  long long k;
  while(query_num--){
    scanf("%d", &num);
    if(num==1){
      scanf("%d %d %lld",&i,&j,&k);
      update(i, k);
      update(j+1, -k);
    }else{
      scanf("%d",&x);
     printf("%lld\n",sum(x));
    }
  }

  return 0;
}
----------------------------------------------------------------------------
----------------------------------------------------------------------------

07 Question: 12899번

자연수를 저장하는 데이터베이스 S에 대해 다음의 쿼리를 처리합시다.

유형 1 : S에 자연수 X를 추가한다.

유형 2 : S에 포함된 숫자 중 X번째로 작은 수를 응답하고 그 수를 삭제한다.
----------------------------------------------------------------------------
07 MySolution: 12899번

#include <cstdio>

const int MAX = 2e6;

int tree[MAX * 4 + 6];

int query(int node, int s, int e, int k) {
    tree[node]--;
    if (s == e) return s;
    int mid = (s + e) >> 1; 
    if (tree[2 * node] >= k) return query(2 * node, s, mid, k);
    else return query(2 * node + 1, mid + 1, e, k - tree[2 * node]);
}

void update(int node, int s, int e, int idx) {
    if (idx < s || e < idx) return;
    tree[node]++;
    if (s == e) return;
    int mid = (s + e) >> 1;
    update(2 * node, s, mid, idx);
    update(2 * node + 1, mid + 1, e, idx);
}

int main() {
    int n; scanf("%d", &n);
    while (n--) {
        int s, x; scanf("%d %d", &s, &x);
        if (s == 1) {
            update(1, 1, MAX, x);
        } else {
            printf("%d\n", query(1, 1, MAX, x));
        }
    }
}
----------------------------------------------------------------------------
----------------------------------------------------------------------------
