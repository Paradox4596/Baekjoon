01 Question: 2630번

아래 <그림 1>과 같이 여러개의 정사각형칸들로 이루어진 정사각형 모양의 종이가 주어져 있고, 각 정사각형들은 하얀색으로 칠해져 있거나 파란색으로 칠해져 있다. 주어진 종이를 일정한 규칙에 따라 잘라서 다양한 크기를 가진 정사각형 모양의 하얀색 또는 파란색 색종이를 만들려고 한다.



전체 종이의 크기가 N×N(N=2k, k는 1 이상 7 이하의 자연수) 이라면 종이를 자르는 규칙은 다음과 같다.

전체 종이가 모두 같은 색으로 칠해져 있지 않으면 가로와 세로로 중간 부분을 잘라서 <그림 2>의 I, II, III, IV와 같이 똑같은 크기의 네 개의 N/2 × N/2색종이로 나눈다. 나누어진 종이 I, II, III, IV 각각에 대해서도 앞에서와 마찬가지로 모두 같은 색으로 칠해져 있지 않으면 같은 방법으로 똑같은 크기의 네 개의 색종이로 나눈다. 이와 같은 과정을 잘라진 종이가 모두 하얀색 또는 모두 파란색으로 칠해져 있거나, 하나의 정사각형 칸이 되어 더 이상 자를 수 없을 때까지 반복한다.

위와 같은 규칙에 따라 잘랐을 때 <그림 3>은 <그림 1>의 종이를 처음 나눈 후의 상태를, <그림 4>는 두 번째 나눈 후의 상태를, <그림 5>는 최종적으로 만들어진 다양한 크기의 9장의 하얀색 색종이와 7장의 파란색 색종이를 보여주고 있다.



입력으로 주어진 종이의 한 변의 길이 N과 각 정사각형칸의 색(하얀색 또는 파란색)이 주어질 때 잘라진 하얀색 색종이와 파란색 색종이의 개수를 구하는 프로그램을 작성하시오.
----------------------------------------------------------------------------
01 MySolution: 2630번

#include <iostream>

using namespace std;

int n;
int paper[128][128];
int blue, white;

void solve(int y, int x, int size)
{
    int check = paper[y][x];
    for (int i = y; i < y + size; i++)
    {
        for (int j = x; j < x + size; j++)
        {

            if (check == 0 && paper[i][j] == 1)
            {
                check = 2;
            }
            else if (check == 1 && paper[i][j] == 0)
            {
                check = 2;
            }
            if (check == 2)
            {
                solve(y, x, size / 2);
                solve(y, x + size / 2, size / 2);
                solve(y + size / 2, x, size / 2);
                solve(y + size / 2, x + size / 2, size / 2);
                return;
            }
        }
    }
    if (check == 0)
        white++;
    else
        blue++;
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    cin >> n;
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            cin >> paper[i][j];

    solve(0, 0, n);
    cout << white << '\n';
    cout << blue << '\n';
    return 0;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

02 Question: 1992번

흑백 영상을 압축하여 표현하는 데이터 구조로 쿼드 트리(Quad Tree)라는 방법이 있다. 흰 점을 나타내는 0과 검은 점을 나타내는 1로만 이루어진 영상(2차원 배열)에서 같은 숫자의 점들이 한 곳에 많이 몰려있으면, 쿼드 트리에서는 이를 압축하여 간단히 표현할 수 있다.

주어진 영상이 모두 0으로만 되어 있으면 압축 결과는 "0"이 되고, 모두 1로만 되어 있으면 압축 결과는 "1"이 된다. 만약 0과 1이 섞여 있으면 전체를 한 번에 나타내지를 못하고, 왼쪽 위, 오른쪽 위, 왼쪽 아래, 오른쪽 아래, 이렇게 4개의 영상으로 나누어 압축하게 되며, 이 4개의 영역을 압축한 결과를 차례대로 괄호 안에 묶어서 표현한다



위 그림에서 왼쪽의 영상은 오른쪽의 배열과 같이 숫자로 주어지며, 이 영상을 쿼드 트리 구조를 이용하여 압축하면 "(0(0011)(0(0111)01)1)"로 표현된다. N ×N 크기의 영상이 주어질 때, 이 영상을 압축한 결과를 출력하는 프로그램을 작성하시오.
----------------------------------------------------------------------------
02 MySolution: 1992번

#include <iostream>
#include <string>

using namespace std;

string video[64];

void printCompResult(int size, int y, int x)
{
    char curr = video[y][x];

    for (int i = y; i < y + size; i++)
        for (int j = x; j < x + size; j++)
            if (video[i][j] != curr)
            {
                cout << '(';
                printCompResult(size / 2, y, x);
                printCompResult(size / 2, y, x + size / 2);
                printCompResult(size / 2, y + size / 2, x);
                printCompResult(size / 2, y + size / 2, x + size / 2);
                cout << ')';
                return;
            }

    cout << curr;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int N;
    cin >> N;
    for (int i = 0; i < N; i++)
        cin >> video[i];

    printCompResult(N, 0, 0);

    return 0;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

03 Question: 1780번

N×N크기의 행렬로 표현되는 종이가 있다. 종이의 각 칸에는 -1, 0, 1 중 하나가 저장되어 있다. 우리는 이 행렬을 다음과 같은 규칙에 따라 적절한 크기로 자르려고 한다.

만약 종이가 모두 같은 수로 되어 있다면 이 종이를 그대로 사용한다.
(1)이 아닌 경우에는 종이를 같은 크기의 종이 9개로 자르고, 각각의 잘린 종이에 대해서 (1)의 과정을 반복한다.
이와 같이 종이를 잘랐을 때, -1로만 채워진 종이의 개수, 0으로만 채워진 종이의 개수, 1로만 채워진 종이의 개수를 구해내는 프로그램을 작성하시오.
----------------------------------------------------------------------------
03 MySolution: 1780번

#include <iostream>
#include <algorithm>
#include <vector>
#include <cmath>

using namespace std;

int result[3];
int map[2200][2200];


bool check(int row, int col, int num) {

	int start = map[row][col];
	for (int i = row; i < row + num; i++) {
		for (int j = col; j < col + num; j++) {
			if (start != map[i][j])
				return false;
		}
	}
	return true;
}


void divide(int row, int col, int num) {


	if (check(row, col, num)) {
		result[map[row][col]]++;
	}
	else {

		int size = num / 3; 
		
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				divide(row + size * i, col + size * j, size);
			}
		}
	}
}


int main() {

	int N;
	scanf("%d", &N);

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {

			int input;
			scanf("%d", &input);
			input++; 	
			map[i][j] = input;
		}
	}
	divide(0, 0, N);
	printf("%d\n%d\n%d", result[0], result[1], result[2]);

}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

04 Question: 1629번

자연수 A를 B번 곱한 수를 알고 싶다. 단 구하려는 수가 매우 커질 수 있으므로 이를 C로 나눈 나머지를 구하는 프로그램을 작성하시오.
----------------------------------------------------------------------------
04 MySolution: 1629번

#include <iostream>

using namespace std;

long long  A, B, C;

long long p(long long b) {
	if (b == 0) return 1;
	if (b == 1) return A%C;

	long long k = p(b / 2)%C;
	if (b % 2 == 0) return k * k%C;
	else return (k* k%C)*(A % C);
}

int main() {

	cin >> A >> B >> C;
	
	cout << p(B)%C;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

05 Question: 11401번

자연수 
\(N\)과 정수 
\(K\)가 주어졌을 때 이항 계수 
\(\binom{N}{K}\)를 1,000,000,007로 나눈 나머지를 구하는 프로그램을 작성하시오.
----------------------------------------------------------------------------
05 MySolution: 11401번

#include <iostream>

using namespace std;

#define MOD 1000000007

long long pow(long long n, long long k) {
    long long ret = 1;
    
    while(k) {
        if(k % 2) ret = (ret * n) % MOD;
        
        n = (n * n) % MOD;
        k /= 2;
    }
    
    return ret;
}

int main() {
    int n, k;
    cin >> n >> k;
    
    long long A = 1, B = 1;
    
    for(int i=n; i>=n-k+1; --i) A = (A * i) % MOD;
    for(int i=2; i<=k; ++i) B = (B * i) % MOD;
    
    cout << (A * pow(B, MOD-2)) % MOD;
    
    return 0;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

06 Question: 2740번

N*M크기의 행렬 A와 M*K크기의 행렬 B가 주어졌을 때, 두 행렬을 곱하는 프로그램을 작성하시오.
----------------------------------------------------------------------------
06 MySolution: 2740번

#include <iostream>


using namespace std;

int pro1[101][101];
int pro2[101][101];
int res[101][101];

int main()
{
	int N, M, K;
	cin >> N >> M;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			cin>>pro1[i][j];
		}
	}
	cin >> M >> K;
	for (int i = 0; i < M; i++) {
		for (int j = 0; j < K; j++) {
			cin >> pro2[i][j];
		}
	}

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < K; j++) {
			for (int k = 0; k < M; k++) {
				res[i][j] += pro1[i][k] * pro2[k][j];
			}
			cout << res[i][j] << " ";
		}
		cout << endl;
	}
	
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

07 Question: 10830번

크기가 N*N인 행렬 A가 주어진다. 이때, A의 B제곱을 구하는 프로그램을 작성하시오. 수가 매우 커질 수 있으니, A^B의 각 원소를 1,000으로 나눈 나머지를 출력한다.
----------------------------------------------------------------------------
07 MySolution: 10830번

#include <iostream>
#define DIV	1000
using namespace std;

int a[5][5], temp[5][5], res[5][5];

void naive_matrix_power(int n, int A[][5], int B[][5]) {
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++) {
			for (int t = 0; t < n; t++) {
				temp[i][j] += (A[i][t] * B[t][j]) % DIV;
				temp[i][j] %= DIV;
			}
		}

	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++) {
			B[i][j] = temp[i][j];
			temp[i][j] = 0;
		}
}

void matrix_power(int n, long long b) {
	while (b > 0) {		
		if (b % 2 == 1) 
			naive_matrix_power(n, a, res);
		naive_matrix_power(n, a, a);

		b /= 2;
	}
}

int main(void) {
	int n; long long b;
	ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);

	cin >> n >> b;
	for (int i = 0; i < n; i++) for (int j = 0; j < n; j++) 
	{ cin >> a[i][j]; res[i][j] = a[i][j] % DIV; }
	matrix_power(n, b - 1);

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) cout << res[i][j] << ' ';
		cout << '\n';
	}

	return 0;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

08 Question: 11444번

피보나치 수는 0과 1로 시작한다. 0번째 피보나치 수는 0이고, 1번째 피보나치 수는 1이다. 그 다음 2번째 부터는 바로 앞 두 피보나치 수의 합이 된다.

이를 식으로 써보면 Fn = Fn-1 + Fn-2 (n ≥ 2)가 된다.

n=17일때 까지 피보나치 수를 써보면 다음과 같다.

0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597

n이 주어졌을 때, n번째 피보나치 수를 구하는 프로그램을 작성하시오.
----------------------------------------------------------------------------
08 MySolution: 11444번

#include <iostream>
#include <map>
#define DIV		1000000007LL
using namespace std;

map<long long, long long> f;

long long fibo(long long n) {	
	if (n == 0) return 0;
	if (n == 1) return 1;
	if (n == 2) return 1;
	if (f.count(n) > 0) return f[n];

	if (n % 2 == 0) {
		long long m = n / 2;
		long long temp1 = fibo(m - 1); long long temp2 = fibo(m);
		f[n] = ((2LL * temp1 + temp2) * temp2) % DIV;
		return f[n];
	}
	long long m = (n + 1) / 2;
	long long temp1 = fibo(m); long long temp2 = fibo(m - 1);
	f[n] = (temp1 * temp1 + temp2 * temp2) % DIV;
	return f[n];
}

int main(void) {
	long long n;

	cin >> n;
	cout << fibo(n);

	return 0;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------
