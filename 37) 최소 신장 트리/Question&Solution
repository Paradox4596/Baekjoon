01 Question: 9372번

상근이는 겨울방학을 맞아 N개국을 여행하면서 자아를 찾기로 마음먹었다. 

하지만 상근이는 새로운 비행기를 무서워하기 때문에, 최대한 적은 종류의 비행기를 타고 국가들을 이동하려고 한다.

이번 방학 동안의 비행 스케줄이 주어졌을 때, 상근이가 가장 적은 종류의 비행기를 타고 모든 국가들을 여행할 수 있도록 도와주자.

상근이가 한 국가에서 다른 국가로 이동할 때 다른 국가를 거쳐 가도(심지어 이미 방문한 국가라도) 된다.
----------------------------------------------------------------------------
01 MySolution: 9372번

#include<iostream>
using namespace std;

int main(){
    int test, N ,M;
    int a,b;
    cin >> test;
    while(test--){
        cin >> N >> M;
        for(int i=0; i < M ; i++){
            cin >> a >> b;
        }
        cout << N-1 <<endl;
    }
    return 0;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

02 Question: 1197번

그래프가 주어졌을 때, 그 그래프의 최소 스패닝 트리를 구하는 프로그램을 작성하시오.

최소 스패닝 트리는, 주어진 그래프의 모든 정점들을 연결하는 부분 그래프 중에서 그 가중치의 합이 최소인 트리를 말한다.
----------------------------------------------------------------------------
02 MySolution: 1197번

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std; 
int parent[10001];
int find(int x) {
	if (parent[x] == x)return x;
	else return parent[x] = find(parent[x]); 
}
void uni(int x, int y) {
	x = find(x); 
	y = find(y); 
	parent[y] = x; 
}
bool sameparent(int x, int y) {
	x = find(x); 
	y = find(y); 
	if (x == y)return true;
	else return false; 
}
int main() {
	int vertex, e; 
	cin >> vertex >> e;
	int result = 0; 
	vector<pair<int, pair<int, int>>>v; 
	for (int i = 0; i < e; i++) {
		int from, to, cost; 
		cin >> from >> to >> cost; 
		v.push_back({ cost,{from,to} }); 
	}
	sort(v.begin(), v.end()); 
	for (int i = 1; i <= vertex; i++)parent[i] = i; 
	for (int i = 0; i < v.size(); i++) {
		if (!sameparent(v[i].second.first, v[i].second.second)) {
			uni(v[i].second.first, v[i].second.second); 
			result += v[i].first; 
		}
	}
	cout << result; 
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------
