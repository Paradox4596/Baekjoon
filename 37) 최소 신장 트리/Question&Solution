01 Question: 9372번

상근이는 겨울방학을 맞아 N개국을 여행하면서 자아를 찾기로 마음먹었다. 

하지만 상근이는 새로운 비행기를 무서워하기 때문에, 최대한 적은 종류의 비행기를 타고 국가들을 이동하려고 한다.

이번 방학 동안의 비행 스케줄이 주어졌을 때, 상근이가 가장 적은 종류의 비행기를 타고 모든 국가들을 여행할 수 있도록 도와주자.

상근이가 한 국가에서 다른 국가로 이동할 때 다른 국가를 거쳐 가도(심지어 이미 방문한 국가라도) 된다.
----------------------------------------------------------------------------
01 MySolution: 9372번

#include<iostream>
using namespace std;

int main(){
    int test, N ,M;
    int a,b;
    cin >> test;
    while(test--){
        cin >> N >> M;
        for(int i=0; i < M ; i++){
            cin >> a >> b;
        }
        cout << N-1 <<endl;
    }
    return 0;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

02 Question: 1197번

그래프가 주어졌을 때, 그 그래프의 최소 스패닝 트리를 구하는 프로그램을 작성하시오.

최소 스패닝 트리는, 주어진 그래프의 모든 정점들을 연결하는 부분 그래프 중에서 그 가중치의 합이 최소인 트리를 말한다.
----------------------------------------------------------------------------
02 MySolution: 1197번

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std; 
int parent[10001];
int find(int x) {
	if (parent[x] == x)return x;
	else return parent[x] = find(parent[x]); 
}
void uni(int x, int y) {
	x = find(x); 
	y = find(y); 
	parent[y] = x; 
}
bool sameparent(int x, int y) {
	x = find(x); 
	y = find(y); 
	if (x == y)return true;
	else return false; 
}
int main() {
	int vertex, e; 
	cin >> vertex >> e;
	int result = 0; 
	vector<pair<int, pair<int, int>>>v; 
	for (int i = 0; i < e; i++) {
		int from, to, cost; 
		cin >> from >> to >> cost; 
		v.push_back({ cost,{from,to} }); 
	}
	sort(v.begin(), v.end()); 
	for (int i = 1; i <= vertex; i++)parent[i] = i; 
	for (int i = 0; i < v.size(); i++) {
		if (!sameparent(v[i].second.first, v[i].second.second)) {
			uni(v[i].second.first, v[i].second.second); 
			result += v[i].first; 
		}
	}
	cout << result; 
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

03 Question: 4386번

도현이는 우주의 신이다. 이제 도현이는 아무렇게나 널브러져 있는 n개의 별들을 이어서 별자리를 하나 만들 것이다. 별자리의 조건은 다음과 같다.

별자리를 이루는 선은 서로 다른 두 별을 일직선으로 이은 형태이다.
모든 별들은 별자리 위의 선을 통해 서로 직/간접적으로 이어져 있어야 한다.
별들이 2차원 평면 위에 놓여 있다. 선을 하나 이을 때마다 두 별 사이의 거리만큼의 비용이 든다고 할 때, 별자리를 만드는 최소 비용을 구하시오.
----------------------------------------------------------------------------
03 MySolution: 4386번

#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
using namespace std;
 
int n;
double x, y;
int connect[101] = {0, };
vector<pair<double, double>> stars;
vector<pair<double, pair<int, int>>> v;
double answer = 0;
 
int find(int a){
    if(a==connect[a]){
        return a;
    }
        
    return connect[a] = find(connect[a]);
}
 
double cal(double x1, double y1, double x2, double y2)
{
    return sqrt(pow(x2-x1, 2)+pow(y2-y1, 2));
}
 
int main()
{
    cin>>n;
    for(int i=0; i<n; i++){
        cin>>x>>y;
        stars.push_back(make_pair(x, y));
    }
 

    for(int i=0; i<stars.size(); i++){
        for(int j=i+1; j<stars.size(); j++){
            double cost = cal(stars[i].first, stars[i].second, stars[j].first, stars[j].second);
            v.push_back(make_pair(cost, make_pair(i, j)));
        }
    }
 
    for(int i=0; i<n; i++){
        connect[i] = i;
    }
 
    sort(v.begin(), v.end());
 
    for(int i=0; i<v.size(); i++){
        int x = v[i].second.first;
        int y = v[i].second.second;
        double cost = v[i].first;
 
        int a = find(x);
        int b = find(y);
 
        if(a!=b){
            connect[a] = b;
            answer += cost;
        }
    }
 
    cout.precision(3);
    cout<<answer<<"\n";
    return 0;
}


----------------------------------------------------------------------------
----------------------------------------------------------------------------

04 Question: 1774번

황선자씨는 우주신과 교감을 할수 있는 채널러 이다. 하지만 우주신은 하나만 있는 것이 아니기때문에 황선자 씨는 매번 여럿의 우주신과 교감하느라 힘이 든다. 이러던 와중에 새로운 우주신들이 황선자씨를 이용하게 되었다.

하지만 위대한 우주신들은 바로 황선자씨와 연결될 필요가 없다. 이미 황선자씨와 혹은 이미 우주신끼리 교감할 수 있는 우주신들이 있기 때문에 새로운 우주신들은 그 우주신들을 거쳐서 황선자 씨와 교감을 할 수 있다.

우주신들과의 교감은 우주신들과 황선자씨 혹은 우주신들 끼리 이어진 정신적인 통로를 통해 이루어 진다. 하지만 우주신들과 교감하는 것은 힘든 일이기 때문에 황선자씨는 이런 통로들이 긴 것을 좋아하지 않는다. 왜냐하면 통로들이 길 수록 더 힘이 들기 때문이다.

또한 우리들은 3차원 좌표계로 나타낼 수 있는 세상에 살고 있지만 우주신들과 황선자씨는 2차원 좌표계로 나타낼 수 있는 세상에 살고 있다. 통로들의 길이는 2차원 좌표계상의 거리와 같다.

이미 황선자씨와 연결된, 혹은 우주신들과 연결된 통로들이 존재한다. 우리는 황선자 씨를 도와 아직 연결이 되지 않은 우주신들을 연결해 드려야 한다. 새로 만들어야 할 정신적인 통로의 길이들이 합이 최소가 되게 통로를 만들어 “빵상”을 외칠수 있게 도와주자.
----------------------------------------------------------------------------
04 MySolution: 1774번

#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
using namespace std;
 
int n;
double x, y;
int connect[101] = {0, };
vector<pair<double, double>> stars;
vector<pair<double, pair<int, int>>> v;
double answer = 0;
 
int find(int a){
    if(a==connect[a]){
        return a;
    }
        
    return connect[a] = find(connect[a]);
}
 
double cal(double x1, double y1, double x2, double y2)
{
    return sqrt(pow(x2-x1, 2)+pow(y2-y1, 2));
}
 
int main()
{
    cin>>n;
    for(int i=0; i<n; i++){
        cin>>x>>y;
        stars.push_back(make_pair(x, y));
    }
 

    for(int i=0; i<stars.size(); i++){
        for(int j=i+1; j<stars.size(); j++){
            double cost = cal(stars[i].first, stars[i].second, stars[j].first, stars[j].second);
            v.push_back(make_pair(cost, make_pair(i, j)));
        }
    }
 
    for(int i=0; i<n; i++){
        connect[i] = i;
    }
 
    sort(v.begin(), v.end());
 
    for(int i=0; i<v.size(); i++){
        int x = v[i].second.first;
        int y = v[i].second.second;
        double cost = v[i].first;
 
        int a = find(x);
        int b = find(y);
 
        if(a!=b){
            connect[a] = b;
            answer += cost;
        }
    }
 
    cout.precision(3);
    cout<<answer<<"\n";
    return 0;
}


----------------------------------------------------------------------------
----------------------------------------------------------------------------

05 Question: 6497번

성진이는 한 도시의 시장인데 거지라서 전력난에 끙끙댄다. 그래서 모든 길마다 원래 켜져 있던 가로등 중 일부를 소등하기로 하였다. 길의 가로등을 켜 두면 하루에 길의 미터 수만큼 돈이 들어가는데, 일부를 소등하여 그만큼의 돈을 절약할 수 있다.

그러나 만약 어떤 두 집을 왕래할 때, 불이 켜져 있지 않은 길을 반드시 지나야 한다면 위험하다. 그래서 도시에 있는 모든 두 집 쌍에 대해, 불이 켜진 길만으로 서로를 왕래할 수 있어야 한다.

위 조건을 지키면서 절약할 수 있는 최대 액수를 구하시오.
----------------------------------------------------------------------------
05 MySolution: 6497번

#include<iostream>
#include<algorithm>
using namespace std;


int m, n;

pair<long, pair<int, int>> edge[200001];
int parents[200001];

long res=0;
int edgenum = 0;


int FindRoot(int x)
{
	if (x == parents[x])
		return x;
	return parents[x] = FindRoot(parents[x]);
}

void Merge(int x, int y)
{
	x = FindRoot(x);
	y = FindRoot(y);

	if (x == y)
		return;
	parents[x] = y;
}


int main()
{


	int x, y, z;


	while(1)
	{
		edgenum = 0;
		res = 0;


		cin >> m >> n;

		
		if (m == 0 && n == 0)
			break;


		for (int i = 0; i <= n; i++)
		{
			parents[i] = i;
			edge[i] = { 0,{0,0} };
		}



		for (int i = 0; i < n; i++) 
		{
			cin >> x >> y >> z;

			edge[i] = { z,{x,y} };
			res += z;

		}


		sort(edge, edge + n);


		for (int i = 0; i < n; i++)
		{
			if (FindRoot(edge[i].second.first) == FindRoot(edge[i].second.second))
				continue;

			Merge(edge[i].second.first, edge[i].second.second);
			res -= edge[i].first;

			edgenum++;
			if (edgenum == m - 1)
				break;
		}

		cout << res<<'\n';


	}

}


----------------------------------------------------------------------------
----------------------------------------------------------------------------

06 Question: 17472번

섬으로 이루어진 나라가 있고, 모든 섬을 다리로 연결하려고 한다. 이 나라의 지도는 N×M 크기의 이차원 격자로 나타낼 수 있고, 격자의 각 칸은 땅이거나 바다이다.

섬은 연결된 땅이 상하좌우로 붙어있는 덩어리를 말하고, 아래 그림은 네 개의 섬으로 이루어진 나라이다. 색칠되어있는 칸은 땅이다.



다리는 바다에만 건설할 수 있고, 다리의 길이는 다리가 격자에서 차지하는 칸의 수이다. 다리를 연결해서 모든 섬을 연결하려고 한다. 섬 A에서 다리를 통해 섬 B로 갈 수 있을 때, 섬 A와 B를 연결되었다고 한다. 다리의 양 끝은 섬과 인접한 바다 위에 있어야 하고, 한 다리의 방향이 중간에 바뀌면 안된다. 또, 다리의 길이는 2 이상이어야 한다.

다리의 방향이 중간에 바뀌면 안되기 때문에, 다리의 방향은 가로 또는 세로가 될 수 밖에 없다. 방향이 가로인 다리는 다리의 양 끝이 가로 방향으로 섬과 인접해야 하고, 방향이 세로인 다리는 다리의 양 끝이 세로 방향으로 섬과 인접해야 한다.

섬 A와 B를 연결하는 다리가 중간에 섬 C와 인접한 바다를 지나가는 경우에 섬 C는 A, B와 연결되어있는 것이 아니다. 

아래 그림은 섬을 모두 연결하는 올바른 2가지 방법이고, 다리는 회색으로 색칠되어 있다. 섬은 정수, 다리는 알파벳 대문자로 구분했다.

	
다리의 총 길이: 13

D는 2와 4를 연결하는 다리이고, 3과는 연결되어 있지 않다.

다리의 총 길이: 9 (최소)

다음은 올바르지 않은 3가지 방법이다

		
C의 방향이 중간에 바뀌었다	D의 길이가 1이다.	가로 다리인 A가 1과 가로로 연결되어 있지 않다.
다리가 교차하는 경우가 있을 수도 있다. 교차하는 다리의 길이를 계산할 때는 각 칸이 각 다리의 길이에 모두 포함되어야 한다. 아래는 다리가 교차하는 경우와 기타 다른 경우에 대한 2가지 예시이다.

	
A의 길이는 4이고, B의 길이도 4이다.

총 다리의 총 길이: 4 + 4 + 2 = 10

다리 A: 2와 3을 연결 (길이 2)

다리 B: 3과 4를 연결 (길이 3)

다리 C: 2와 5를 연결 (길이 5)

다리 D: 1과 2를 연결 (길이 2)

총 길이: 12

나라의 정보가 주어졌을 때, 모든 섬을 연결하는 다리 길이의 최솟값을 구해보자.
----------------------------------------------------------------------------
06 MySolution: 17472번

#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <algorithm>
#include <math.h>
#pragma warning(disable:4996)

using namespace std;
#define INF 1234567890
struct Edge {
	int start;
	int end;
	int cost;
	Edge(){}
	Edge(int X, int Y, int Z) : start(X), end(Y), cost(Z) {}
};
struct compare {
	bool operator()(Edge a, Edge b) {
		return a.cost > b.cost;
	}
};

int n, m;
int island_id = 1;
int dx[4] = { 1,0,-1,0 };
int dy[4] = { 0,1,0,-1 };
int map[10][10];
int new_map[10][10];
int visited[10][10];
vector<pair<int,int>> island;
vector<int> connect_check[7];
int visited_check[7];

priority_queue<Edge, vector<Edge>, compare> pq;
int parent[7];
int MST_cost;

int find_parent(int x) {
	if (parent[x] == x)
		return x;
	return parent[x] = find_parent(parent[x]);
}

void union_parent(int x, int y) {
	int x_p = find_parent(x);
	int y_p = find_parent(y);
	if (parent[x_p] < parent[y_p])
		parent[y_p] = parent[x_p];
	else
		parent[x_p] = parent[y_p];
}

bool isCycle(int x, int y) {
	int x_p = find_parent(x);
	int y_p = find_parent(y);
	if (x_p == y_p)
		return 1;
	else
		return 0;
}

void Kruskal() {
	for (int i = 0; i < 8; i++) {
		parent[i] = i;
	}
	while (!pq.empty()) {
		Edge temp = pq.top();
		int start = temp.start;
		int end = temp.end;
		int cost = temp.cost;
		pq.pop();
		if (isCycle(start, end) == 0) {
			MST_cost += cost;
			connect_check[start].push_back(end);
			connect_check[end].push_back(start);
			union_parent(start, end);
		}
	}
}

void find_island(int start_id, int dir, int x, int y) {
	int next_x = x;
	int next_y = y;
	int dist = 1;
	while (1) {			
		next_x = next_x + dx[dir];
		next_y = next_y + dy[dir];
		if (next_x >= 0 && next_x < n && next_y >= 0 && next_y < m) {
			if (new_map[next_x][next_y] == 0) {
				dist++;
			}
			else {
				int start = start_id;
				int end = new_map[next_x][next_y];
				int cost = dist;
				if (cost >= 2) {
					pq.push(Edge(start, end, cost));
				}
				break;
			}
		}
		else {
			break;
		}	
	}
}

void check_edge(int x, int y) {
	for (int i = 0; i < 4; i++) {
		int next_x = x + dx[i];
		int next_y = y + dy[i];
		int direction = i;
		if (next_x >= 0 && next_x < n && next_y >= 0 && next_y < m) {
			if (new_map[next_x][next_y] == 0) {
				find_island(new_map[x][y], direction, next_x, next_y);
			}
		}
	}
}

void DFS(int x, int y) {
	for (int i = 0; i < 4; i++) {
		int next_x = x + dx[i];
		int next_y = y + dy[i];
		if (next_x >= 0 && next_x < n && next_y >= 0 && next_y < m) {
			if (visited[next_x][next_y] == 0 && map[next_x][next_y] == 1) {
				visited[next_x][next_y] = 1;
				new_map[next_x][next_y] = island_id;
				DFS(next_x, next_y);
			}
		}
	}
}

void DFS(int x) {
	visited_check[x] = 1;
	for (int i = 0; i < connect_check[x].size(); i++) {
		int next_x = connect_check[x][i];
		if (visited_check[next_x] == 0) {
			DFS(next_x);
		}
	}
}

int main() {
	cin >> n >> m;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cin >> map[i][j];
			if (map[i][j] != 0)
				island.push_back({ i,j });
		}
	}

	for (int i = 0; i < island.size(); i++) {
		int x = island[i].first;
		int y = island[i].second;
		if (visited[x][y] == 0) {
			new_map[x][y] = island_id;
			DFS(x, y);
			island_id++;
		}
	}

	for (int i = 0; i < island.size(); i++) {
		int x = island[i].first;
		int y = island[i].second;
		check_edge(x, y);
	}

	Kruskal();

	DFS(1);

	for (int i = 1; i < island_id; i++) {
		if (visited_check[i] == 0) {
			cout << -1;
			return 0;
		}
	}

	cout << MST_cost;

	return 0;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------
