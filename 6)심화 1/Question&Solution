01 Question: 25083번

아래 예제와 같이 새싹을 출력하시오.
----------------------------------------------------------------------------
01 MySolution: 25083번

#include <iostream>
#include <string>
 
using namespace std;
 
int main(int argc, char const *argv[]) {
 
	string s = "         ,r'\"7\n";   // \", \n 이 제어문자다.
	       s += "r`-_   ,'  ,/\n";    // \n 이 제어문자다.
	       s += " \\. \". L_r'\n";    // \\, \", \n 이 제어문자다.
	       s += "   `~\\/\n";         // \\, \n 이 제어문자다.
	       s += "      |\n";           // \n 이 제어문자다.
	       s += "      |";
	cout << s;
	return 0;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

02 Question: 25083번

동혁이는 오래된 창고를 뒤지다가 낡은 체스판과 피스를 발견했다.

체스판의 먼지를 털어내고 걸레로 닦으니 그럭저럭 쓸만한 체스판이 되었다. 하지만, 검정색 피스는 모두 있었으나, 흰색 피스는 개수가 올바르지 않았다.

체스는 총 16개의 피스를 사용하며, 킹 1개, 퀸 1개, 룩 2개, 비숍 2개, 나이트 2개, 폰 8개로 구성되어 있다.

동혁이가 발견한 흰색 피스의 개수가 주어졌을 때, 몇 개를 더하거나 빼야 올바른 세트가 되는지 구하는 프로그램을 작성하시오.
----------------------------------------------------------------------------
02 MySolution: 25083번

#include <iostream>
 
using namespace std;
 
int main() {
    int chess[6];
    int count[6] = {1, 1, 2, 2, 2, 8};
    
    for(int i = 0; i < 6; i++) {
        cin >> chess[i];
        cout << count[i] - chess[i] << " " << endl;
    }
    
    return 0;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

03 Question: 2444번

예제를 보고 규칙을 유추한 뒤에 별을 찍어 보세요.
----------------------------------------------------------------------------
03 MySolution: 2444번

#include <iostream>
using namespace std;
 
int main() {
 
	int N = 0;
	cin >> N;
 
	for (int i = 1; i <= N; i++) {
		
		for (int j = N - i; j > 0; j--) {
			cout << " ";
		}
 
		for (int j = 2*i-1; j > 0; j--) {
			cout << "*";
		}
		cout << endl;
	}
 
	for (int i = 1; i < N; i++) {
		
		for (int j = 0; j < i; j++) {
			cout << " ";
		}
 
		for (int j = 2*(N-i) -1; j > 0; j--) {
			cout << "*";
		}
		cout << endl;
	}
}
----------------------------------------------------------------------------
----------------------------------------------------------------------------

04 Question: 10988번

알파벳 소문자로만 이루어진 단어가 주어진다. 이때, 이 단어가 팰린드롬인지 아닌지 확인하는 프로그램을 작성하시오.

팰린드롬이란 앞으로 읽을 때와 거꾸로 읽을 때 똑같은 단어를 말한다. 

level, noon은 팰린드롬이고, baekjoon, online, judge는 팰린드롬이 아니다.
----------------------------------------------------------------------------
04 MySolution: 10988번

#include <iostream>
#include <cstring>
#include <string>
#include <algorithm>
#include <vector>
using namespace std;

int main(int argc, char* argv[])
{
	string s;

	cin >> s;

	for (int i = 0; i < s.length() / 2; ++i) {
		if (s[i] != s[s.length() - i - 1]) {
			cout << "0" << endl;
			return 0;
		}
	}

	cout << "1" << endl;
	return 0;
}
----------------------------------------------------------------------------
----------------------------------------------------------------------------

05 Question: 1157번

알파벳 대소문자로 된 단어가 주어지면, 이 단어에서 가장 많이 사용된 알파벳이 무엇인지 알아내는 프로그램을 작성하시오. 단, 대문자와 소문자를 구분하지 않는다.
----------------------------------------------------------------------------
05 MySolution: 1157번

#include <iostream>

using namespace std;

int alpha[26], cnt =0;
string input;
//아스키코드 : 대문자 65~90, 소문자 97~122

int main() {
    cin >> input;

    //빈도수 체킹
    for(int i=0;i<input.length();i++) {
        if(input[i]<97) alpha[input[i] - 65]++; //대문자
        else alpha[input[i] - 97]++; //소문자
    }

    int max = 0, max_indx=0;

    for(int i=0;i<26;i++) {
        if(max<alpha[i]) {
            max=alpha[i];
            max_indx = i;
        }
    }
    //가장 많이 사용된 알파벳이 여러개인가?
    for(int i=0;i<26;i++) {
        if(max==alpha[i]) cnt++;
    }
    //여러개라면 ? 출력, 아니라면 대문자로 출력
    if(cnt>1) cout << "?";
    else cout << (char)(max_indx+65);
}
----------------------------------------------------------------------------
----------------------------------------------------------------------------

06 Question: 2941번

예전에는 운영체제에서 크로아티아 알파벳을 입력할 수가 없었다. 따라서, 다음과 같이 크로아티아 알파벳을 변경해서 입력했다.
----------------------------------------------------------------------------
06 MySolution: 2941번

#include <iostream>
#include <string>
#include <vector>
using namespace std;
int main() {
    vector<string> croatian = {"c=","c-","dz=","d-","lj","nj","s=","z="};
    int idx;
    string str;
    cin >> str;
    for(int i = 0; i < croatian.size(); i++)
    {
        while(1){
            idx = str.find(croatian[i]);
            if(idx == string::npos)
                break;
            str.replace(idx,croatian[i].length(),"#");
        }
    }
    cout << str.length();
}
----------------------------------------------------------------------------
----------------------------------------------------------------------------

07 Question: 1316번

그룹 단어란 단어에 존재하는 모든 문자에 대해서, 각 문자가 연속해서 나타나는 경우만을 말한다. 예를 들면, ccazzzzbb는 c, a, z, b가 모두 연속해서 나타나고, kin도 k, i, n이 연속해서 나타나기 때문에 그룹 단어이지만, aabbbccb는 b가 떨어져서 나타나기 때문에 그룹 단어가 아니다.

단어 N개를 입력으로 받아 그룹 단어의 개수를 출력하는 프로그램을 작성하시오.
----------------------------------------------------------------------------
07 MySolution: 1316번

#include <iostream>
using namespace std;

int main() { 
	int N;                                // 입력받을 단어의 개수
	string word;                          // 입력받은 단어
	int count = 0;                        // 그룹 단어가 아니라면 카운트

	cin >> N;
	for (int i = 0; i < N; i++) {
		cin >> word;
        
		// 단어에서 알파벳 문자의 출현유무를 나타내는 배열 (출현없으면 false)
		bool alphabet[26] = { false, };        
		alphabet[(int)(word[0]) - 97] = true;  // 첫번째 단어값을 true로 설정

		for (int i = 1; i < word.size(); i++) {
        
			// 1. i번째 문자가 i-1번째 문자와 같으면 연속이므로 넘어간다.
			if (word[i] == word[i - 1]) {
				continue;
			}
            
			// 2. i번째 문자가 i-1번째 문자와 같지 않고, (연속하지 않고)
			//    해당 배열값이 true라면 (이미 나왔던 문자라면)
			else if(word[i] != word[i - 1] 
            		&& alphabet[(int)(word[i]) - 97] == true){
				count++;	// 그룹단어가 아니므로 카운트
				break;
			}
            
			// 3. 위의 두 경우에 해당하지 않는 경우
			//    처음 등장한 문자인 경우
			else {
				alphabet[(int)(word[i]) - 97] = true;
			}
		}
	}

	// 그룹 단어의 개수 = 전체단어의 개수 - 그룹단어가 아닌 단어의 개수
	cout << N - count;

	return 0;
}
----------------------------------------------------------------------------
----------------------------------------------------------------------------
