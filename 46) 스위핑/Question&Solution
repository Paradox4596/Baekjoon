01 Question: 2170번

매우 큰 도화지에 자를 대고 선을 그으려고 한다. 선을 그을 때에는 자의 한 점에서 다른 한 점까지 긋게 된다. 선을 그을 때에는 이미 선이 있는 위치에 겹쳐서 그릴 수도 있는데, 여러 번 그은 곳과 한 번 그은 곳의 차이를 구별할 수 없다고 하자.

이와 같은 식으로 선을 그었을 때, 그려진 선(들)의 총 길이를 구하는 프로그램을 작성하시오. 선이 여러 번 그려진 곳은 한 번씩만 계산한다.
----------------------------------------------------------------------------
01 MySolution: 2170번

#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;
int n;
vector<pair<int, int> > arr;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cin >> n;
    for(int i=0 ; i<n ; i++) {
        int a, b;
        cin >> a >> b;
        arr.push_back(make_pair(a,b));
    }
    sort(arr.begin(), arr.end());
    int ans=0;
    int start = arr[0].first, end = arr[0].second;
    for(int i=1 ; i<n ; i++) {
        int s = arr[i].first, e = arr[i].second;
        if(end>=s) {
            if(end<e) {
                end = e;
            } 
        } else {
            ans += end-start;
            start = s, end = e;
        }
    }
    ans += end-start;
    cout << ans << "\n";

    return 0;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

02 Question: 2836번

상근이가 살고 있는 도시에는 큰 강이 흐르고 있고, 모든 사람의 집은 이 강 근처에 있다. 집은 0번부터 M번까지 강을 따라서 번호가 매겨져 있고, 인접한 집 사이의 거리는 모두 1 킬로미터이다.

상근이는 0번 집에 살고 있고, 보트를 이용해서 사람들을 운송하는 일을 하고 있다.

오늘은 저녁때까지 M번 집으로 가야한다. 상근이는 M번 집으로 가는 길에 사람들을 태워주려고 한다.

오늘 상근이의 수상 택시를 타려고 하는 사람은 총 N명이다. 상근이는 각 사람들이 탑승할 위치와 목적지를 알고 있다. 상근이의 보트는 매우 커서 N명 모두 보트에 태울 수 있다.

예를 들어, 사람 A가 2번 집에서 8번으로 가려고 하고, B가 6에서 4로 가려고 하는 경우를 생각해보자. 상근이는 0번 집에서 시작해서, 2번에서 A를 태우고, 6번에서 B를 태울 것이다. 그 다음 4로 돌아가 B를 내려주고, 8번에서 A를 내려다준다. 그 다음에 원래 상근이가 가려고 했던 M번 집으로 가면 된다.

상근이가 모든 사람을 데려다주고, M번 집으로 가기 위해서 이동해야 하는 거리의 최솟값을 구하는 프로그램을 작성하시오.
----------------------------------------------------------------------------
02 MySolution: 2836번

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int N;
long long M;
long long result;
vector<pair<long long, long long>> people;

void init()
{
  cin >> N >> M;
  for(int i = 0; i < N; i++) {
    long long from, to;
    cin >> from >> to;
    if(from < to)
      continue;
    people.push_back({to, from});
  }

  sort(people.begin(), people.end());
}

void calc()
{
  long long start = -1;
  long long last = -1;

  for(auto p : people) {
    if(last < p.first) {
      result += (last - start);
      start = p.first;
    }
    if(last < p.second) {
      last = p.second;
    }
  }

  result += (last - start);
  result *= 2;
  result += M;
  cout << result;
}

int main() {
  ios_base :: sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  init();
  calc();
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

03 Question: 5419번

강한 북서풍이 불고 있다. 이 뜻은 동쪽과 남쪽 사이의 모든 방향으로 항해할 수 있다는 뜻이다. 북쪽이나 서쪽으로 항해하는 것은 불가능하다.

작은 섬이 여러 개 있는 바다가 있다. 섬은 좌표 평면의 한 점으로 나타낼 수 있다. y 좌표가 증가하는 방향은 북쪽, x좌표가 증가하는 방향은 동쪽이다. 북서풍을 타고 항해할 수 있는 섬의 쌍의 수를 구하는 프로그램을 작성하시오.
----------------------------------------------------------------------------
03 MySolution: 5419번

#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
#include <queue>
#include <stack>
#include <map>

using namespace std;
using pii = pair<int, int>;
using ll = long long;

vector<pii> point;
int n;
int maxN = 0;

struct RQ
{
    vector<int> seg;
    RQ(int n)
    {
        seg.clear();
        seg.resize(n * 4 + 4, 0);
    }
    int query(int lo, int hi, int idx, int qlo, int qhi)
    {
        if (hi < qlo || qhi < lo)
        {
            return 0;
        }
        if (qlo <= lo && hi <= qhi)
        {
            return seg[idx];
        }

        int mid = (lo + hi) / 2;
        int left = query(lo, mid, idx * 2, qlo, qhi);
        int right = query(mid + 1, hi, idx * 2 + 1, qlo, qhi);
        return left + right;
    }
    int update(int lo, int hi, int idx, int pos)
    {
        if (hi < pos || lo > pos)
        {
            return seg[idx];
        }
        if (lo == hi)
        {
            return seg[idx] = seg[idx] + 1;
        }
        int mid = (lo + hi) / 2;
        int left = update(lo, mid, idx * 2, pos);
        int right = update(mid + 1, hi, idx * 2 + 1, pos);
        return seg[idx] = left + right;
    }
};

ll solve()
{
    ll answer = 0;
    RQ rq(maxN);

    for (int i = 0; i < point.size(); i++)
    {
        answer += (ll)rq.query(0, maxN, 1, 0, point[i].second);
        rq.update(0, maxN, 1, point[i].second);
    }
    return answer;
}

int main()
{
    cin.tie(0)->sync_with_stdio(0);
    cout.tie(0);
    int t;
    cin >> t;
    while (t--)
    {
        maxN = 0;
        cin >> n;
        point.clear();
        point.resize(n);
        map<int, int> dic;
        for (int i = 0; i < n; i++)
        {
            cin >> point[i].first >> point[i].second;
            dic[point[i].second]++;
        }
        sort(point.begin(), point.end(), [](pii &a, pii &b)
             {
                 if (a.first == b.first)
                 {
                     return a.second > b.second;
                 }
                 else
                 {
                     return a.first < b.first;
                 }
             });
        for (auto it = dic.end(); it != dic.begin();)
        {
            it--;
            it->second = maxN++;
        }
        for (auto &p : point)
        {
            p.second = dic[p.second];
        }
        cout << solve() << "\n";
    }
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

04 Question: 17131번

여우가 정보섬에 올라왔다!

오늘도 하늘에는 아름다운 별들이 빛나고 있다. 정보섬은 언덕 꼭대기에 위치해 있기 때문에 별이 잘 보이기로 유명하다. 그래서인지, 여우 한 마리가 정보섬에 올라와 밤하늘을 바라보며 별자리를 만들고 있다. 여우는 세 개의 별을 연결하여 V형 별자리를 만드는데, 그 이유는 V가 자신의 얼굴과 닮았기 때문이라나 뭐라나. 여우는 자신의 시점을 기준으로 생각하기 때문에, V가 회전한 모양(<, >, ㄴ, ㄱ, ^ 등)은 V라고 생각하지 않는다.

여우는 만들 수 있는 V형 별자리의 총 개수가 궁금해졌다. 그러나 일일이 세보기에는 별이 너무 많았기 때문에, 여우는 뛰어난 프로그래머인 당신에게 도움을 요청했다! 귀여운 여우를 위해 얼마나 많은 V형 별자리가 만들어질 수 있는지 계산해 주자.

V형 별자리를 명확하게 정의하면 다음과 같다. 세 별 (s,t,u)가 s.x < t.x < u.x이고 s.y > t.y < u.y이면 V형 별자리이다. 예를 들어 아래의 '정보섬의 밤하늘 참고도'에서 (a,b,c)는 V형 별자리를 이루지만 (d,b,c)는 d.x < b.x가 아니므로 V형 별자리가 아니다. V형 별자리의 개수를 셀 때, 한 별이 여러 별자리에 속할 수 있다.



답이 매우 커질 수 있으므로 (109+7)로 나눈 나머지를 출력한다.
----------------------------------------------------------------------------
04 MySolution: 17131번

#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;
using ll = long long;
using pll = pair<ll, ll>;
const ll MOD = 1e9 + 7;
const ll MAX = 2e5 + 5;

struct SegTree {
    SegTree() { memset(tree, 0, sizeof tree); }
    ll tree[800005];

    ll query(ll node, ll s, ll e, ll qs, ll qe) {
        if (qe < s || e < qs) return 0;
        if (qs <= s && e <= qe) return tree[node];
        ll mid = (s + e) >> 1;
        return query(2 * node, s, mid, qs, qe) + query(2 * node + 1, mid + 1, e, qs, qe);
    }

    void update(ll node, ll s, ll e, ll idx, ll diff) {
        if (idx < s || idx > e) return;
        tree[node] += diff;
        if (s == e) return;
        ll mid = (s + e) >> 1; 
        update(2 * node, s, mid, idx, diff);
        update(2 * node + 1, mid + 1, e, idx, diff);
    }
};

pll arr[MAX];
ll tmp[MAX];

int main() {
    ll n; scanf("%lld", &n);
    for (ll i = 0; i < n; i++) {
        scanf("%lld %lld", &arr[i].first, &arr[i].second);
    }
	
    sort(arr, arr + n);    
    tmp[0] = 0;
    for (ll i = 1; i < n; i++) {
        if (arr[i - 1].first == arr[i].first) tmp[i] = tmp[i - 1];
        else tmp[i] = tmp[i - 1] + 1;
    }
    for (ll i = 0; i < n; i++) arr[i].first = tmp[i];

    SegTree seg = SegTree();
    
    for (ll i = 0; i < n; i++) {
        seg.update(1, 0, MAX, arr[i].first, 1);
    }

    sort(arr, arr + n, [](pll &a, pll &b) {
        return a.second == b.second ? a.first < b.first : a.second < b.second;
    });

    ll res = 0;
    ll cur = -2e9;
    for (ll i = 0; i < n; i++) {
        if (cur != arr[i].second) {
            cur = arr[i].second;
            for (ll j = i; cur == arr[j].second && j < n; j++) {
                seg.update(1, 0, MAX, arr[j].first, -1);
            }
        }
        ll l = seg.query(1, 0, MAX, 0, arr[i].first - 1) % MOD;
        ll r = seg.query(1, 0, MAX, arr[i].first + 1, MAX) % MOD;
        res += (l * r) % MOD;
    }
    printf("%lld", res % MOD);
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

05 Question: 7626번

축에 평행한 직사각형 N개가 평면 위에 있다. 이 직사각형들이 차지하는 전체 면적을 구하는 프로그램을 작성하시오.
----------------------------------------------------------------------------
05 MySolution: 7626번

#include<stdio.h>
#include<algorithm>
using namespace std;

int N;

class Point{
        public:
        int val;
        int idx;
        int y1;
        int y2;

        bool operator<(Point a) const{
                return this->val < a.val;
        }
};
class Y{
        public:
        int val;
        int idx;

        bool operator<(Y a) const{
                return this->val < a.val;
        }
};

Point x[400002];
Y y[400002];

long long int cnt[1600000];
long long int sum[1600000];
class Tree{
        public:
        Tree(){
                for(int i=0;i<N*8;i++){
                        cnt[i] = 0;
                        sum[i] = 0;
                }

        }
        void update(int left, int right, int start, int end, int k, int val){
                int mid = (start+end)/2;
                int ret = 0;
                if(start >=left && end <= right){
                                cnt[k] += val;
                }else{
                        if(left<=mid) update(left, right, start, mid, k*2, val);
                        if(right>mid) update(left, right, mid+1, end, k*2+1, val);
                }

                if(cnt[k]){
                        sum[k] = y[end+1].val - y[start].val;
                }else{
                        if(start==end) sum[k] = 0;
                        else sum[k] = sum[k*2] + sum[k*2+1];
                }
        }
};
int main(){
        long long int ANS = 0;
        scanf("%d",&N);
        for(int i=0; i<N;i++){
                int a = 2*i, b = 2*i+1;
                scanf("%d %d %d %d",&x[a].val, &x[b].val, &y[a].val, &y[b].val);
                x[a].idx = y[a].idx = a;
                x[b].idx = y[b].idx = b;
        }
        sort(y,y+2*N);

        for(int i=0;i<2*N;i++){
                int arr_idx = y[i].idx / 2;
                if(y[i].idx %2==0){
                        x[arr_idx*2].y1 = i;
                        x[arr_idx*2+1].y1 = i;
                }else{
                        x[arr_idx*2].y2 = i;
                        x[arr_idx*2+1].y2 = i;
                }
        }

        sort(x,x+2*N);
        for(int i=0;i<2*N;i++){
        }

        Tree *t = new Tree();
        for(int i=0;i<2*N;i++){
                if(i>0){
                        ANS += sum[1] * (x[i].val - x[i-1].val);
                }
                if(x[i].idx % 2 ==0){
                        t->update(x[i].y1, x[i].y2-1, 0, 2*N-1,1, 1);
                }else{
                        t->update(x[i].y1, x[i].y2-1, 0, 2*N-1,1, -1);
                }

        }
        printf("%lld\n",ANS);
        return 0;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

06 Question: 11012번

You are a president deeply loved by many folks in your country. Every time you go on a parade (which is your main job, what else should a president do), the folks would throw eggs at you — because you love eggs! The folks passionately send their eggs to you, and you always can catch the eggs. In fact, egg-catching is exactly what makes you look forward to the parade every day! A folk would throw an egg at you for each time your parade comes to his home. You are given n coordinates on a 2D-map, these are where the folks that will throw an egg at you each time they see you on a parade. Note that the coordinates may repeat, since several folks may live together. There are in total m days left in your term and the area to parade each day are set. A parade always takes place in an axis-parallel rectangle area, as stated clearly in the constitution and as the president you have no choice but to follow it. You are given m 2D-ranges [ℓ, r]×[b, t] describing the parades.
----------------------------------------------------------------------------
06 MySolution: 11012번

#include<iostream>
#include<utility>
#include<algorithm>
#include<vector>
#include<cstring>
using namespace std;
#define MAXN 100001
int N, M, tsz;

struct Node {
    int l, r, val;
    Node() : l(0), r(0), val(0) {};
    Node(int _l, int _r, int _val) : l(_l), r(_r), val(_val) {};
};

void init(vector<Node> &tree) {
    int sz = tsz >> 1;
    for (int i = 1; i <= sz; ++i) {
        tree[i].l = i << 1; tree[i].r = i << 1 | 1;
    }
}

void update(vector<Node> &tree, int node, int s, int e, int val, int idx) {
    if (s != e) {
        int mid = (s + e) >> 1;
        int n1 = tree[node].l, n2 = tree[node].r;
        if (idx <= mid) {
            tree[node].l = tree.size();
            tree.push_back(Node(tree[n1].l, tree[n1].r, tree[n1].val + val));
            update(tree, tree[node].l, s, mid, val, idx);
        }
        else {
            tree[node].r = tree.size();
            tree.push_back(Node(tree[n2].l, tree[n2].r, tree[n2].val + val));
            update(tree, tree[node].r, mid + 1, e, val, idx);
        }
    }
}

int query(vector<Node> &tree, int node, int s, int e, int l, int r) {
    if (r < s || l > e) return 0;
    if (l <= s && e <= r) return tree[node].val;
    int mid = (s + e) >> 1;
    int n1 = tree[node].l, n2 = tree[node].r;
    return query(tree, n1, s, mid, l, r) + query(tree, n2, mid + 1, e, l, r);
}

int roots[100005];
vector<Node> tree;
int main() {
    tsz = 1;
    while (tsz < MAXN) tsz <<= 1;
    tsz <<= 1;
    cin.tie(nullptr); ios::sync_with_stdio(false);
    int tc; cin >> tc;
    while (tc--) {
        cin >> N >> M;
        vector<vector<int>> yval(MAXN+1);
        tree = vector<Node>(tsz);
        for (int i = 0; i < N; ++i) {
            int x, y;
            cin >> x >> y;
            ++x; ++y;
            yval[x].push_back(y);
        }
        init(tree);
        roots[0] = 1;
        for (int i = 1; i <= MAXN; ++i) {
            roots[i] = tree.size();
            int pi = roots[i - 1];
            tree.push_back(Node(tree[pi].l, tree[pi].r, tree[pi].val));
            for (auto y : yval[i]) {
                tree[roots[i]].val += 1;
                update(tree, roots[i], 1, MAXN, 1, y);
            }
        }
        long long ans = 0;
        for (int i = 0; i < M; ++i) {
            int l, r, b, t;
            cin >> l >> r >> b >> t;
            ++r; ++b; ++t;
            ans += query(tree, roots[r], 1, MAXN, b, t) - query(tree, roots[l], 1, MAXN, b, t);
        }
        cout << ans << '\n';
    }
    return 0;
}
