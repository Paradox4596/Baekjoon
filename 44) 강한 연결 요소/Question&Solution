01 Question: 2150번

방향 그래프가 주어졌을 때, 그 그래프를 SCC들로 나누는 프로그램을 작성하시오.

방향 그래프의 SCC는 우선 정점의 최대 부분집합이며, 그 부분집합에 들어있는 서로 다른 임의의 두 정점 u, v에 대해서 u에서 v로 가는 경로와 v에서 u로 가는 경로가 모두 존재하는 경우를 말한다.

예를 들어 위와 같은 그림을 보자. 이 그래프에서 SCC들은 {a, b, e}, {c, d}, {f, g}, {h} 가 있다. 물론 h에서 h로 가는 간선이 없는 경우에도 {h}는 SCC를 이룬다.
----------------------------------------------------------------------------
01 MySolution: 2150번

#include<iostream>
#include<vector>
#include<stack>
#include<algorithm>
using namespace std;

int vertex_num, edge_num;
vector<vector<int>> adj;
stack<int> st;
vector<int> visited_order;
vector<bool> is_scc;
vector<vector<int>> sccs;
int order=0;

int FindSCC(int now_idx){
  int min_order = visited_order[now_idx] = ++order;
  int next_idx;
  st.push(now_idx);

  for(int i=0 ; i<adj[now_idx].size() ; ++i){
    next_idx = adj[now_idx][i];
    if(visited_order[next_idx] == -1)
      min_order = min(min_order, FindSCC(next_idx));
    else if(!is_scc[next_idx])
      min_order = min(min_order, visited_order[next_idx]);
  } 

  if(min_order == visited_order[now_idx]){
    int temp;
    vector<int> new_scc;
    while(1){
      temp = st.top();
      st.pop();
      is_scc[temp] = true;
      new_scc.push_back(temp);
      if(temp == now_idx)
        break;
    }

    sccs.push_back(new_scc);
  }
  return min_order;
}

bool Comp(vector<int>& va, vector<int>& vb){
  return va[0] < vb[0];
}

int main(){
  ios_base::sync_with_stdio(0);
  cin>>vertex_num>>edge_num;

  adj = vector<vector<int>>(vertex_num+1);
  is_scc = vector<bool>(vertex_num+1, false);
  visited_order = vector<int>(vertex_num+1, -1);

  int u,v;
  for(int i=0; i<edge_num ; ++i){
    cin>>u>>v;
    adj[u].push_back(v);
  }

  for(int idx =1; idx<=vertex_num ; ++idx)
    if(visited_order[idx] == -1)
      FindSCC(idx);
  
  for(int i=0; i<sccs.size() ; ++i)
    sort(sccs[i].begin(), sccs[i].end());

  sort(sccs.begin(), sccs.end(), Comp);

  cout<<sccs.size()<<"\n";
  for(int i=0; i<sccs.size() ; ++i){
    for(int j=0; j<sccs[i].size() ; ++j)
      cout<<sccs[i][j]<<' ';
    cout<<"-1\n";
  }

  return 0;
}
----------------------------------------------------------------------------
----------------------------------------------------------------------------

02 Question: 4196번

도미노는 재밌다. 도미노 블록을 일렬로 길게 늘어세운 뒤 블록 하나를 넘어뜨리면 그 블록이 넘어지며 다음 블록을 넘어뜨리는 일이 반복되어 일렬로 늘어선 블록들을 연쇄적으로 모두 쓰러뜨릴 수 있다. 그러나, 가끔씩 도미노가 다른 블록을 넘어뜨리지 못하게 배치되어 있다면, 우리는 다음 블록을 수동으로 넘어뜨려야 한다.

이제 각 도미노 블록의 배치가 주어졌을 때, 모든 블록을 넘어뜨리기 위해 손으로 넘어뜨려야 하는 블록 개수의 최솟값을 구하자.
----------------------------------------------------------------------------
02 MySolution: 4196번

#include <iostream>
#include <vector>
#include <cstring>
 
using namespace std;
 
int N, M;
vector< vector<int> > adj;
vector<int> stk;
 
int sccindegree[100001];
int SCCID[100001];
int Vertexcnt, SCCcnt;
int discovered[100001];
 
int SCC(int now){
    int ret = discovered[now] = Vertexcnt++;
    
    stk.push_back(now);
    
    for(auto &next : adj[now]){
        if(discovered[next] == -1){
            ret = min(ret, SCC(next));
        }
        else if(SCCID[next] == -1){
            ret = min(ret, discovered[next]);
        }
    }
    
    if(ret == discovered[now]){
        while(1){
            int temp = stk.back();
            stk.pop_back();
            SCCID[temp] = SCCcnt;
            if(temp == now) break;
        }
        SCCcnt++;
    }
    
    return ret;
}
 
void init(){
    memset(discovered, -1, sizeof(discovered));
    memset(SCCID, -1, sizeof(SCCID));
    memset(sccindegree, 0, sizeof(sccindegree));
    adj.clear();
    adj.resize(N+1, vector<int>());
    Vertexcnt = SCCcnt = 0;
    
    int u, v;
    for(int i = 0; i < M; i++){
        cin >> u >> v;
        adj[u].push_back(v);
    }
}
 
void solve(){
    int result = 0;
    
    for(int i = 1; i <= N; i++){
        if(discovered[i] != -1) continue;
        SCC(i);
    }
    
    for(int i = 1; i <= N; i++){
        for(auto &w : adj[i]){
            if(SCCID[w] == SCCID[i]) continue;
            sccindegree[SCCID[w]]++;
        }
    }
    
    for(int i = 0; i < SCCcnt; i++){
        if(!sccindegree[i]) result++;
    }
    
    cout << result << "\n";
}
 
int main(){
    ios::sync_with_stdio(0), cin.tie(0);
    int test;
    cin >> test;
    while(test--){
        cin >> N >> M;
        
        init();
        solve();
        
    }
    
    return 0;
}
----------------------------------------------------------------------------
----------------------------------------------------------------------------

03 Question: 3977번

World Soccer Championship이 다가오고 있다! 천재적인 전술을 창조하는 플랜 아티스트 감독 도현이는 자신의 팀이 승리하도록 만반의 준비를 가하고 있다. 도현이의 전략은 경기장을 여러 개의 구역으로 나누고, 어떤 선수가 A구역에서 B구역으로 이동하게 하는 움직임을 (A, B)로 표현한다. 모든 도현이의 팀 선수들이 이 움직임만을 따라서 이동한다면 승리하리라고 도현이는 확신한다.

도현이는 선수들에게 자신의 전술을 말해주며, 다른 모든 구역에 도달할 수 있는 시작 구역을 찾은 뒤 지시한 움직임만을 따라가라고 했다. 그러나 도현이는 한 가지 간과한 것이 있었는데 그건 선수들이 자신만큼 똑똑하지 않다는 것이다. 선수들은 그러한 시작 구역을 찾는 것이 어려웠다. 이제 당신이 적절한 시작 구역을 찾아줘야 한다.
----------------------------------------------------------------------------
03 MySolution: 3977번

#include <iostream>
#include <algorithm>
#include <cstring>
#include <vector>
#include <stack>

using namespace std;

const int MAX_N = 100001;

int T;
int N, M;
vector<int> adj[MAX_N];

stack<int> st;
int discover[MAX_N], scc[MAX_N];
int sccCnt, sccSize;
vector<int> SCCNode[MAX_N];
bool repreSCC[MAX_N];
int startSCC;

int dfs(int no) {
    st.push(no);
    discover[no] = sccCnt++;
    int parent = discover[no];
    
    for(auto next : adj[no]) {
        if(discover[next] == -1)
            parent = min(parent, dfs(next));
        else if(scc[next] == -1)
            parent = min(parent, discover[next]);
    }
    
    if(parent == discover[no]) {
        while(true) {
            int x = st.top();
            st.pop();
            scc[x] = sccSize;
            SCCNode[sccSize].push_back(x);
            if(no == x)
                break;
        }
        sccSize++;
    }
    
    return parent;
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    
    cin >> T;
    while(T--) {
        for(int i=0; i<MAX_N; i++) {
            adj[i].clear();
            SCCNode[i].clear();
        }
        memset(discover, -1, sizeof discover);
        memset(scc, -1, sizeof scc);
        sccCnt = sccSize = 1;
        fill(repreSCC, repreSCC+MAX_N, true);
        
        cin >> N >> M;
        for(int i=0; i<M; i++) {
            int a, b;
            cin >> a >> b;
            adj[a].push_back(b);
        }
        
        for(int i=0; i<N; i++) {
            if(discover[i] == -1)
                dfs(i);
        }

        for(int i=0; i<N; i++)
            for(auto next : adj[i])
                if(scc[i] != scc[next])
                    repreSCC[scc[next]] = false;
        
        sccSize--;
        int cnt = 0;
        for(int i=1; i<=sccSize; i++) {
            if(repreSCC[i]) {
                cnt++;
                startSCC = i;
            }
        }
        
        if(!cnt) {
            for(int i=0; i<N; i++)
                cout << i << '\n';
        }
        else if(cnt == 1) {
            sort(SCCNode[startSCC].begin(), SCCNode[startSCC].end());
            for(auto x : SCCNode[startSCC]) {
                cout << x << '\n';
            }
        }
        else
            cout << "Confused" << '\n';
        cout << '\n';
    }
    
    return 0;
}
----------------------------------------------------------------------------
----------------------------------------------------------------------------

04 Question: 4013번

인도의 도시 중 하나인 시루세리에는 모든 도로들이 일방통행으로 되어 있다. 도로들이 만나는 모든 교차로에는 시루세리 은행의 현금입출금기(ATM)가 설치되어 있다. 시루세리에는 유명한 레스토랑 체인인 아웃백 커리 하우스가 있다. 이 레스토랑의 각 체인점들은 교차로에만 위치한다. 물론 각 교차로마다 항상 이 레스토랑 체인점이 있는 것은 아니다. 이 레스토랑은 현금만 사용할 수 있다. 

시루세리에 사는 반디치는 오늘 오후에 이 레스토랑에서 가족들과 파티를 열려고 한다. 그런데 갖고 있는 현금이 부족하여 레스토랑으로 가는 동안에 가능한 한 많은 현금을 ATM 기기로부터 인출할 계획을 세웠다. 그는 자신의 집에서 출발하여 차로 이동하면서 통과하는 모든 교차로 ATM 기기에 들어있는 현금 전부를 인출하려고 한다. 차량의 최종 목적지는 아웃백 커리 하우스 체인점 중의 한 곳이고, 이 체인점이 어떤 교차로에 위치하는지는 상관없다.

반디치는 시루세리 은행의 홈페이지 정보를 통해 각 ATM 기기에 현금이 얼마나 들어 있는지를 알고 있다. 이동 시 동일한 도로나 교차로를 여러 번 지날 수 있다. ATM 기기의 현금은 새로 보충되지 않기 때문에 첫 번째 이후 다시 방문하는 교차로의 ATM 기기에는 인출할 현금이 없다.

예를 들어, 아래 그림처럼 도시에 6개의 교차로가 있다고 하자. 교차로는 원으로 표시되어 있고, 화살표는 도로를 나타낸다. 이중 원으로 표시된 교차로에는 레스토랑이 있다. 각 ATM 기기가 갖고 있는 현금의 액수는 교차로 위에 표시된 숫자이다. 이 예에서 현금 인출을 1번 교차로부터 시작한다면, 반디치는 1-2-4-1-2-3-5의 경로를 통해서 총 47의 현금을 인출할 수 있다.



반디치가 출발 장소에서 어떤 레스토랑까지 이동하면서 인출할 수 있는 현금의 최대 액수가 얼마인지를 계산하는 프로그램을 작성하시오.
----------------------------------------------------------------------------
04 MySolution: 4013번

#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
#include <cstring>
#define fasti ios_base::sync_with_stdio(false); cin.tie(0);
#define fastio ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
#define INF 1e9+7
#define pii pair<int, int>
#define MAX 500001
typedef long long ll;
// typedef pair<int, int> pii;
 
using namespace std;
 
int N, M, S, P;
bool is_rest[MAX];
bool is_sccrest[MAX];
int discovered[MAX];
int sccnum[MAX];
 
ll sccmoney[MAX];
ll money[MAX];
ll sccmaxmoney[MAX];
 
vector<ll> adj[MAX];
vector<int> sccgraph[MAX];
vector<int> stk;
 
int sccCounter, vertaxCounter;
 
void input(){
    cin >> N >> M;
    int u, v;
    for(int i = 0; i < M; i++){
        cin >> u >> v;
        adj[u].push_back(v);
    }
    for(int i = 1; i <= N; i++){
        cin >> money[i];
    }
    cin >> S >> P;
    for(int i = 0; i < P; i++){
        cin >> u;
        is_rest[u] = true;
    }
    
    memset(discovered, -1, sizeof(discovered));
    memset(sccnum, -1, sizeof(sccnum));
    memset(sccmaxmoney, -1, sizeof(sccmaxmoney));
}
 
int SCC(int now){
    int ret = discovered[now] = vertaxCounter++;
    stk.push_back(now);
    
    for(int i = 0; i < adj[now].size(); i++){
        int next = adj[now][i];
        
        if(discovered[next] == -1){
            ret = min(ret, SCC(next));
        }
        else if(sccnum[next] == -1){
            ret = min(ret, discovered[next]);
        }
    }
    
    if(ret == discovered[now]){
        ll m = 0;
        bool in_sccrest = false;
        while(true){
            int temp = stk.back();
            stk.pop_back();
            sccnum[temp] = sccCounter;
            m += money[temp];
            if(is_rest[temp]) in_sccrest = true;
            if(temp == now) break;
        }
        sccmoney[sccCounter] = m;
        if(in_sccrest) is_sccrest[sccCounter] = true;
        sccCounter++;
    }
    
    return ret;
}
 
void make_sccgraph(){
    for(int i = 1; i <= N; i++){
        for(auto &w : adj[i]){
            if(sccnum[w] == sccnum[i]) continue;
            sccgraph[sccnum[i]].push_back(sccnum[w]);
        }
    }
}
 
ll getmaxmoney(int nowscc){
    ll &ret = sccmaxmoney[nowscc];
    if(ret != -1) return ret;
    
    if(sccgraph[nowscc].empty()){
        if(is_sccrest[nowscc]) return ret = sccmoney[nowscc];
        else return ret = 0;
    }
    
    ret = sccmoney[nowscc];
    ll temp = 0;
    
    for(int i = 0; i < sccgraph[nowscc].size(); i++){
        int nextscc = sccgraph[nowscc][i];
        temp = max(temp, getmaxmoney(nextscc));
    }
    
    if(temp == 0 && !is_sccrest[nowscc]) return ret = 0;
 
    return ret += temp;
}
 
void solve(){
    for(int i = 1; i <= N; i++){
        if(discovered[i] == -1){
            SCC(i);
        }
    }
    
    make_sccgraph();
    
    ll res = getmaxmoney(sccnum[S]);
    cout << res << "\n";
}
 
int main(){
    fastio
    input();
    solve();
    
    return 0;
}
----------------------------------------------------------------------------
----------------------------------------------------------------------------

05 Question: 11280번

2-SAT은 N개의 불리언 변수 
\(x_1, x_2, ..., x_n\)가 있을 때, 2-CNF 식을 true로 만들기위해 
\(x_i\)를 어떤 값으로 정해야하는지를 구하는 문제이다.

2-CNF식은 
\( \left( x \lor y \right) \land \left( \lnot y \lor z \right) \land \left( x \lor \lnot z \right) \land \left( z \lor y \right) \) 와 같은 형태이다. 여기서 괄호로 묶인 식을 절(clause)라고 하는데, 절은 2개의 변수를 
\(\lor\)한 것으로 이루어져 있다. 
\(\lor\)는 OR, 
\(\land\)는 AND, 
\(\lnot\)은 NOT을 나타낸다.

변수의 개수 N과 절의 개수 M, 그리고 식 
\(f\)가 주어졌을 때, 식 
\(f\)를 true로 만들 수 있는지 없는지를 구하는 프로그램을 작성하시오.

예를 들어, N = 3, M = 4이고, 
\(f =  \left( \lnot x_1 \lor x_2 \right) \land \left( \lnot x_2 \lor x_3 \right) \land \left( x_1 \lor x_3 \right) \land \left( x_3 \lor x_2 \right) \) 인 경우에 
\(x_1\)을 false, 
\(x_2\)을 false, 
\(x_3\)를 true로 정하면 식 
\(f\)를 true로 만들 수 있다. 하지만, N = 1, M = 2이고, 
\(f = \left( x_1 \lor x_1 \right) \land \left( \lnot x_1 \lor \lnot x_1 \right) \)인 경우에는 
\(x_1\)에 어떤 값을 넣어도 식 f를 true로 만들 수 없다.
----------------------------------------------------------------------------
05 MySolution: 11280번

#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
#include <cstring>
#define fasti ios_base::sync_with_stdio(false); cin.tie(0);
#define fastio ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
#define INF 1e9+7
#define pii pair<int, int>
#define MAX 500001
typedef long long ll;
// typedef pair<int, int> pii;
 
using namespace std;
 
int N, M, S, P;
bool is_rest[MAX];
bool is_sccrest[MAX];
int discovered[MAX];
int sccnum[MAX];
 
ll sccmoney[MAX];
ll money[MAX];
ll sccmaxmoney[MAX];
 
vector<ll> adj[MAX];
vector<int> sccgraph[MAX];
vector<int> stk;
 
int sccCounter, vertaxCounter;
 
void input(){
    cin >> N >> M;
    int u, v;
    for(int i = 0; i < M; i++){
        cin >> u >> v;
        adj[u].push_back(v);
    }
    for(int i = 1; i <= N; i++){
        cin >> money[i];
    }
    cin >> S >> P;
    for(int i = 0; i < P; i++){
        cin >> u;
        is_rest[u] = true;
    }
    
    memset(discovered, -1, sizeof(discovered));
    memset(sccnum, -1, sizeof(sccnum));
    memset(sccmaxmoney, -1, sizeof(sccmaxmoney));
}
 
int SCC(int now){
    int ret = discovered[now] = vertaxCounter++;
    stk.push_back(now);
    
    for(int i = 0; i < adj[now].size(); i++){
        int next = adj[now][i];
        
        if(discovered[next] == -1){
            ret = min(ret, SCC(next));
        }
        else if(sccnum[next] == -1){
            ret = min(ret, discovered[next]);
        }
    }
    
    if(ret == discovered[now]){
        ll m = 0;
        bool in_sccrest = false;
        while(true){
            int temp = stk.back();
            stk.pop_back();
            sccnum[temp] = sccCounter;
            m += money[temp];
            if(is_rest[temp]) in_sccrest = true;
            if(temp == now) break;
        }
        sccmoney[sccCounter] = m;
        if(in_sccrest) is_sccrest[sccCounter] = true;
        sccCounter++;
    }
    
    return ret;
}
 
void make_sccgraph(){
    for(int i = 1; i <= N; i++){
        for(auto &w : adj[i]){
            if(sccnum[w] == sccnum[i]) continue;
            sccgraph[sccnum[i]].push_back(sccnum[w]);
        }
    }
}
 
ll getmaxmoney(int nowscc){
    ll &ret = sccmaxmoney[nowscc];
    if(ret != -1) return ret;
    
    if(sccgraph[nowscc].empty()){
        if(is_sccrest[nowscc]) return ret = sccmoney[nowscc];
        else return ret = 0;
    }
    
    ret = sccmoney[nowscc];
    ll temp = 0;
    
    for(int i = 0; i < sccgraph[nowscc].size(); i++){
        int nextscc = sccgraph[nowscc][i];
        temp = max(temp, getmaxmoney(nextscc));
    }
    
    if(temp == 0 && !is_sccrest[nowscc]) return ret = 0;
 
    return ret += temp;
}
 
void solve(){
    for(int i = 1; i <= N; i++){
        if(discovered[i] == -1){
            SCC(i);
        }
    }
    
    make_sccgraph();
    
    ll res = getmaxmoney(sccnum[S]);
    cout << res << "\n";
}
 
int main(){
    fastio
    input();
    solve();
    
    return 0;
}
----------------------------------------------------------------------------
----------------------------------------------------------------------------
