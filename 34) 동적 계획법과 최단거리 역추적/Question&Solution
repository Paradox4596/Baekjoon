01 Question: 12852번

정수 X에 사용할 수 있는 연산은 다음과 같이 세 가지 이다.

X가 3으로 나누어 떨어지면, 3으로 나눈다.
X가 2로 나누어 떨어지면, 2로 나눈다.
1을 뺀다.
정수 N이 주어졌을 때, 위와 같은 연산 세 개를 적절히 사용해서 1을 만들려고 한다. 연산을 사용하는 횟수의 최솟값을 출력하시오.
----------------------------------------------------------------------------
01 MySolution: 12852번

#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

int dp[1000001];
int answer;
int n;

void solve(){

    dp[1] = 1;

    for(int i = 2;i<=n;i++){
        dp[i] = i;
    }

    for(int i = 2;i<=n;i++){
        dp[i] = dp[i - 1] + 1;
        if(i % 3 == 0){
            dp[i] = min(dp[i],dp[i / 3] + 1);
        }
        if(i % 2== 0){
            dp[i] = min(dp[i],dp[i / 2] + 1);
        }
    }

    cout<<dp[n] - 1<<endl;

    int count = n;

    cout<<n<<" ";
    
    while(count > 1){
        if(count % 3 == 0 && dp[count / 3] == dp[count] - 1){
            cout<<count / 3<<" ";
            count /= 3;
        }
        else if(count % 2 == 0 && dp[count / 2] == dp[count] - 1){
            cout<<count / 2<<" ";
            count /= 2;
        }
        else {
            cout<<count - 1<<" ";
            count -= 1;
        }
    }
    return;
}

int main(){
    cin>>n;
    
    solve();

    return 0;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

02 Question: 14002번

수열 A가 주어졌을 때, 가장 긴 증가하는 부분 수열을 구하는 프로그램을 작성하시오.

예를 들어, 수열 A = {10, 20, 10, 30, 20, 50} 인 경우에 가장 긴 증가하는 부분 수열은 A = {10, 20, 10, 30, 20, 50} 이고, 길이는 4이다.
----------------------------------------------------------------------------
02 MySolution: 14002번

#include<iostream>
#include<vector>
#include<algorithm>
#define endl "\n"
 
using namespace std;
 
int main(){
    int n;
    cin>>n;
    vector<int> sequence(n+1);
 
    vector<int> increase;
    vector<int> DP(n+1);
 
    DP[0] = 1;
    int len = 0;
 
    for(int i = 1;i<=n;i++){
        cin>>sequence[i];
        DP[i] = 1;
        for(int j = 1;j<i;j++){
            if(DP[i]<=DP[j] and sequence[j]<sequence[i]){
                DP[i] = DP[j] + 1;
            }
        }
        len = max(len, DP[i]);
    }
 
    cout<<len<<endl;
    for(int i = n;i>0;i--){
        if(DP[i] == len){
            increase.push_back(sequence[i]);
            len--;
        }
    }
 
    int size = increase.size();
 
    for(int i = increase.size()-1;i>=0;i--){
        cout<<increase[i]<<" ";
    }
 
    return 0;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

03 Question: 14003번

수열 A가 주어졌을 때, 가장 긴 증가하는 부분 수열을 구하는 프로그램을 작성하시오.

예를 들어, 수열 A = {10, 20, 10, 30, 20, 50} 인 경우에 가장 긴 증가하는 부분 수열은 A = {10, 20, 10, 30, 20, 50} 이고, 길이는 4이다.
----------------------------------------------------------------------------
03 MySolution: 14003번

#include <iostream>
#include <algorithm>
#include <vector>
#include <stack>
using namespace std;

int main(){
    ios::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
    int N;
    cin>>N;
    int *num = new int[N];
    int *dp = new int[N];
    int a;
    int idx, dptmp=0;
    vector <int> L;
    stack <int> s;
    vector <int>::iterator p;
    for(int i=0;i<N;i++){
        cin>>a;
        num[i]=a;
        if(L.size()==0) {
            L.push_back(num[i]);
            dp[i]=1;
        }
        else{
            if(L[L.size()-1]<num[i]) {
                L.push_back(num[i]);
                dp[i] = L.size();
            }
            else{
                p = lower_bound(L.begin(),L.end(),num[i]);
                *(p)=num[i];
                dp[i]=p-L.begin()+1;
            }
        }
        if(dp[i]>dptmp) {
            idx = i;
            dptmp = dp[i];
        }
    }
    cout<<L.size();
    s.push(num[idx]);
    for(int i=idx-1;i>=0;i--){
        if(num[i]<num[idx] && dp[i]+1 == dp[idx]){
            idx = i;
            s.push(num[i]);
        }
    }
    cout<<"\n";
    while(!s.empty()){
        cout<<s.top()<<" ";
        s.pop();
    }
    return 0;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

04 Question: 9252번

LCS(Longest Common Subsequence, 최장 공통 부분 수열)문제는 두 수열이 주어졌을 때, 모두의 부분 수열이 되는 수열 중 가장 긴 것을 찾는 문제이다.

예를 들어, ACAYKP와 CAPCAK의 LCS는 ACAK가 된다.
----------------------------------------------------------------------------
04 MySolution: 9252번

#include<iostream>
#include <string>
#include <algorithm>
using namespace std;
string a, b;
string result;
int dp[1001][1001] = { 0, };

int main() {

	ios_base::sync_with_stdio(0);
	cin.tie(0), cout.tie(0);
	string temp1, temp2;
	cin >> temp1;
	cin >> temp2;
	
	a = ' ' + temp1;
	b = ' ' + temp2;
	
	
	for (int i = 1; i < b.size(); i++) {
		for (int j = 1; j < a.size(); j++) {
			if (a[j] == b[i]) dp[i][j] = dp[i - 1][j - 1] + 1;
			else
				dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
		}
	}

	
	
	int col = a.size() - 1;
	int row = b.size() - 1;

	while (dp[row][col]) {

		if (dp[row][col] == dp[row - 1][col]) {
			row--;
		}
		else if (dp[row][col] == dp[row][col - 1]) {
			col--;
		}
		else {
			result += a[col];
			row--, col--;
		}

	}

	cout << dp[b.size() - 1][a.size() - 1] << endl;
	if (result.size() > 0) {
		reverse(result.begin(), result.end());
		cout << result << endl;
	}
	return 0;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

05 Question: 2618번

어떤 도시의 중심가는 N개의 동서방향 도로와 N개의 남북방향 도로로 구성되어 있다.

모든 도로에는 도로 번호가 있으며 남북방향 도로는 왼쪽부터 1에서 시작하여 N까지 번호가 할당되어 있고 동서방향 도로는 위부터 1에서 시작하여 N까지 번호가 할당되어 있다. 또한 동서방향 도로 사이의 거리와 남 북방향 도로 사이의 거리는 모두 1이다. 동서방향 도로와 남북방향 도로가 교차하는 교차로의 위치는 두 도로의 번호의 쌍인 (동서방향 도로 번호, 남북방향 도로 번호)로 나타낸다. N이 6인 경우의 예를 들면 다음과 같다.



이 도시에는 두 대의 경찰차가 있으며 두 차를 경찰차1과 경찰차2로 부른다. 처음에는 항상 경찰차1은 (1, 1)의 위치에 있고 경찰차2는 (N, N)의 위치에 있다. 경찰 본부에서는 처리할 사건이 있으면 그 사건이 발생된 위치를 두 대의 경찰차 중 하나에 알려 주고, 연락 받은 경찰차는 그 위치로 가장 빠른 길을 통해 이동하여 사건을 처리한다. (하나의 사건은 한 대의 경찰차가 처리한다.) 그리고 사건을 처리 한 경찰차는 경찰 본부로부터 다음 연락이 올 때까지 처리한 사건이 발생한 위치에서 기다린다. 경찰 본부에서는 사건이 발생한 순서대로 두 대의 경찰차에 맡기려고 한다. 처리해야 될 사건들은 항상 교차로에서 발생하며 경찰 본부에서는 이러한 사건들을 나누어 두 대의 경찰차에 맡기되, 두 대의 경찰차들이 이동하는 거리의 합을 최소화 하도록 사건을 맡기려고 한다.

예를 들어 앞의 그림처럼 N=6인 경우, 처리해야 하는 사건들이 3개 있고 그 사건들이 발생된 위치 를 순서대로 (3, 5), (5, 5), (2, 3)이라고 하자. (3, 5)의 사건을 경찰차2에 맡기고 (5, 5)의 사건도 경찰차2에 맡기며, (2, 3)의 사건을 경찰차1에 맡기면 두 차가 이동한 거리의 합은 4 + 2 + 3 = 9가 되 고, 더 이상 줄일 수는 없다.

처리해야 할 사건들이 순서대로 주어질 때, 두 대의 경찰차가 이동하는 거리의 합을 최소화 하도록 사건들을 맡기는 프로그램을 작성하시오.
----------------------------------------------------------------------------
05 MySolution: 2618번

#include <iostream>
#include <cstring>
 
#define endl "\n"
#define MAX 1010
using namespace std;
 
struct COORD
{
    int x;
    int y;
};
 
int N, W;
int DP[MAX][MAX];
COORD Event[MAX];
 
int Max(int A, int B) { return A > B ? A : B; }
int Min(int A, int B) { return A < B ? A : B; }
 
void Input()
{
    cin >> N >> W;
    for (int i = 1; i <= W; i++)
    {
        cin >> Event[i].x >> Event[i].y;
    }
}
 
int Find_Dist(int x, int y, int xx, int yy) { return abs(xx - x) + abs(yy - y); }
 
int Total_Distance(int Police1, int Police2)
{
    if (Police1 == W || Police2 == W) return 0;
    if (DP[Police1][Police2] != -1) return DP[Police1][Police2];
    
    int Next_Event = Max(Police1, Police2) + 1;
    int Dist1, Dist2;
 
    if (Police1 == 0) Dist1 = Find_Dist(1, 1, Event[Next_Event].x, Event[Next_Event].y);
    else Dist1 = Find_Dist(Event[Police1].x, Event[Police1].y, Event[Next_Event].x, Event[Next_Event].y);
 
    if (Police2 == 0) Dist2 = Find_Dist(N, N, Event[Next_Event].x, Event[Next_Event].y);
    else Dist2 = Find_Dist(Event[Police2].x, Event[Police2].y, Event[Next_Event].x, Event[Next_Event].y);
 
    int Result1 = Dist1 + Total_Distance(Next_Event, Police2);
    int Result2 = Dist2 + Total_Distance(Police1, Next_Event);
    DP[Police1][Police2] = Min(Result1, Result2);
    return DP[Police1][Police2];
}
 
void Route(int P1, int P2)
{
    if (P1 == W || P2 == W) return;
    
    int Next_Event = Max(P1, P2) + 1;
    int Dist1, Dist2;
 
    if (P1 == 0) Dist1 = Find_Dist(1, 1, Event[Next_Event].x, Event[Next_Event].y);
    else Dist1 = Find_Dist(Event[P1].x, Event[P1].y, Event[Next_Event].x, Event[Next_Event].y);
 
    if (P2 == 0) Dist2 = Find_Dist(N, N, Event[Next_Event].x, Event[Next_Event].y);
    else Dist2 = Find_Dist(Event[P2].x, Event[P2].y, Event[Next_Event].x, Event[Next_Event].y);
 
    if (DP[Next_Event][P2] + Dist1 < DP[P1][Next_Event] + Dist2)
    {
        cout << 1 << endl;
        Route(Next_Event, P2);
    }
    else
    {
        cout << 2 << endl;
        Route(P1, Next_Event);
    }
}
 
void Solution()
{
    memset(DP, -1, sizeof(DP));
    cout << Total_Distance(0, 0) << endl;
    Route(0, 0);
}
 
void Solve()
{
    Input();
    Solution();
}
 
int main(void)
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
 
    Solve();
 
    return 0;
}


----------------------------------------------------------------------------
----------------------------------------------------------------------------

06 Question: 13913번

수빈이는 동생과 숨바꼭질을 하고 있다. 수빈이는 현재 점 N(0 ≤ N ≤ 100,000)에 있고, 동생은 점 K(0 ≤ K ≤ 100,000)에 있다. 수빈이는 걷거나 순간이동을 할 수 있다. 만약, 수빈이의 위치가 X일 때 걷는다면 1초 후에 X-1 또는 X+1로 이동하게 된다. 순간이동을 하는 경우에는 1초 후에 2*X의 위치로 이동하게 된다.

수빈이와 동생의 위치가 주어졌을 때, 수빈이가 동생을 찾을 수 있는 가장 빠른 시간이 몇 초 후인지 구하는 프로그램을 작성하시오.
----------------------------------------------------------------------------
06 MySolution: 13913번

#include<iostream>
#include<queue>
#include<vector>
using namespace std;
queue<pair <int, int>> q;
bool check[1000001];
int parent[1000001];
int N, K;
int ans;
vector<int> v;
vector<int> path;
void bfs() {
 
    while (!q.empty()) {
        int x = q.front().first;
        int time = q.front().second;
        check[x] = true;
        q.pop();
        if (x == K) {
            int idx = x;
            while (idx != N) {
                path.push_back(idx);
                idx = parent[idx];
            }
            cout << time << "\n";
            break;
        }

        if (x-1 >= 0 && x-1 <= 200000 && check[x-1] == false) {
            q.push(make_pair(x-1, time + 1));
            check[x-1] = true;
            parent[x-1] = x;
        }

 
        if (x+1 >= 0 && x+1 <= 200000 && check[x+1] == false) {
            q.push(make_pair(x+1, time + 1));;
            check[x+1] = true;
            parent[x+1] = x;
        }

 
        if (x*2 >= 0 && x * 2 <= 200000 && check[x * 2] == false) {
            q.push(make_pair(x * 2, time + 1));
            check[x * 2] = true;
            parent[x * 2] = x;
        }
    }
}
 
 
 
 
int main(void) {
    cin >> N >> K;
    q.push(make_pair(N, 0));
    bfs();
    cout << N<< ' ';
    for (int i = path.size() - 1; i >= 0; i--)
        cout << path[i] << ' ';
 
    return 0;
}
----------------------------------------------------------------------------
----------------------------------------------------------------------------

07 Question: 9019번

네 개의 명령어 D, S, L, R 을 이용하는 간단한 계산기가 있다. 이 계산기에는 레지스터가 하나 있는데, 이 레지스터에는 0 이상 10,000 미만의 십진수를 저장할 수 있다. 각 명령어는 이 레지스터에 저장된 n을 다음과 같이 변환한다. n의 네 자릿수를 d1, d2, d3, d4라고 하자(즉 n = ((d1 × 10 + d2) × 10 + d3) × 10 + d4라고 하자)

D: D 는 n을 두 배로 바꾼다. 결과 값이 9999 보다 큰 경우에는 10000 으로 나눈 나머지를 취한다. 그 결과 값(2n mod 10000)을 레지스터에 저장한다.
S: S 는 n에서 1 을 뺀 결과 n-1을 레지스터에 저장한다. n이 0 이라면 9999 가 대신 레지스터에 저장된다.
L: L 은 n의 각 자릿수를 왼편으로 회전시켜 그 결과를 레지스터에 저장한다. 이 연산이 끝나면 레지스터에 저장된 네 자릿수는 왼편부터 d2, d3, d4, d1이 된다.
R: R 은 n의 각 자릿수를 오른편으로 회전시켜 그 결과를 레지스터에 저장한다. 이 연산이 끝나면 레지스터에 저장된 네 자릿수는 왼편부터 d4, d1, d2, d3이 된다.
위에서 언급한 것처럼, L 과 R 명령어는 십진 자릿수를 가정하고 연산을 수행한다. 예를 들어서 n = 1234 라면 여기에 L 을 적용하면 2341 이 되고 R 을 적용하면 4123 이 된다.

여러분이 작성할 프로그램은 주어진 서로 다른 두 정수 A와 B(A ≠ B)에 대하여 A를 B로 바꾸는 최소한의 명령어를 생성하는 프로그램이다. 예를 들어서 A = 1234, B = 3412 라면 다음과 같이 두 개의 명령어를 적용하면 A를 B로 변환할 수 있다.

1234 →L 2341 →L 3412
1234 →R 4123 →R 3412

따라서 여러분의 프로그램은 이 경우에 LL 이나 RR 을 출력해야 한다.

n의 자릿수로 0 이 포함된 경우에 주의해야 한다. 예를 들어서 1000 에 L 을 적용하면 0001 이 되므로 결과는 1 이 된다. 그러나 R 을 적용하면 0100 이 되므로 결과는 100 이 된다.
----------------------------------------------------------------------------
07 MySolution: 9019번

#include <queue>
#include <iostream>
#include <string>
#include <cstring>

using namespace std;

int a, b;
bool visited[10000];

void bfs()
{
    queue<pair<int, string>> q;
    q.push(make_pair(a, ""));
    visited[a] = true;

    while (!q.empty())
    {
        int cur_num = q.front().first;
        string cur_op = q.front().second;
        q.pop();

        if (cur_num == b)
        {
            cout << cur_op << '\n';
            return;
        }

        int D, S, L, R, temp;
        D = (cur_num * 2) % 10000;
        if (!visited[D])
        {
            visited[D] = true;
            q.push(make_pair(D, cur_op + "D"));
        }

        S = cur_num - 1 < 0 ? 9999 : cur_num - 1;
        if (!visited[S])
        {
            visited[S] = true;
            q.push(make_pair(S, cur_op + "S"));
        }

        L = (cur_num % 1000) * 10 + (cur_num / 1000);
        if (!visited[L])
        {
            visited[L] = true;
            q.push(make_pair(L, cur_op + "L"));
        }

        R = cur_num / 10 + (cur_num % 10) * 1000;
        if (!visited[R])
        {
            visited[R] = true;
            q.push(make_pair(R, cur_op + "R"));
        }
    }
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int T;
    cin >> T;

    while (T--)
    {
        cin >> a >> b;
        memset(visited, false, sizeof(visited)); 
        bfs();
    }

    return 0;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

08 Question: 11779번

n(1≤n≤1,000)개의 도시가 있다. 그리고 한 도시에서 출발하여 다른 도시에 도착하는 m(1≤m≤100,000)개의 버스가 있다. 우리는 A번째 도시에서 B번째 도시까지 가는데 드는 버스 비용을 최소화 시키려고 한다. 그러면 A번째 도시에서 B번째 도시 까지 가는데 드는 최소비용과 경로를 출력하여라. 항상 시작점에서 도착점으로의 경로가 존재한다.
----------------------------------------------------------------------------
08 MySolution: 11779번

#define INF 2100000000
#include <iostream>
#include <queue>
#include <vector>
using namespace std;

int N, M;
vector<pair<int, int>> arr[1002];
int value[1002];
int prev_arr[1002];

void dijkstra(int start) {
	for (int i = 1; i <= N; i++) value[i] = INF;
	value[start] = 0;
	priority_queue<pair<int, int>> pq;
	pq.push({ 0,start });

	while (!pq.empty()) {
		int str = pq.top().second;
		int val = -pq.top().first;
		pq.pop();

		if (val > value[str]) continue;

		for (int i = 0; i < arr[str].size(); i++) {
			int weight = val + arr[str][i].second;
			int dest = arr[str][i].first;
			if (value[dest] <= weight) {
				continue;
			}
			prev_arr[dest] = str;
			value[dest] = weight;
			pq.push({ -weight,dest });
		}
	}
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);

	cin >> N >> M;
	for (int i = 0; i < M; i++) {
		int str, dest, val;
		cin >> str >> dest >> val;
		arr[str].push_back({ dest,val });
	}

	int str, dest;
	cin >> str >> dest;
	dijkstra(str);

	cout << value[dest] << "\n";

	vector<int> V;
	V.push_back(dest);
	int temp = prev_arr[dest];
	while (temp != str) {
		V.push_back(temp);
		temp = prev_arr[temp];
	}
	V.push_back(str);

	cout << V.size() << "\n";
	for (int i = V.size() - 1; i >= 0; i--) {
		cout << V[i] << " ";
	}

}

----------------------------------------------------------------------------
----------------------------------------------------------------------------
