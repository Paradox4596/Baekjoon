01 Question: 11659번

수 N개가 주어졌을 때, i번째 수부터 j번째 수까지 합을 구하는 프로그램을 작성하시오.
----------------------------------------------------------------------------
01 MySolution: 11659번

#include <iostream>
#include <vector>
using namespace std;

int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	int n, m;
	cin >> n >> m;
	vector<long> dp(n + 1);
	dp[0] = 0;
	for (int i = 1; i <= n; i++) {
		long num;
		cin >> num;
		dp[i] = dp[i - 1] + num;
	}
	for (int i = 0; i < m; i++) {
		int s, e;
		cin >> s >> e;
		cout << dp[e] - dp[s - 1]<<'\n';
	}


	return 0;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

02 Question: 2559번

매일 아침 9시에 학교에서 측정한 온도가 어떤 정수의 수열로 주어졌을 때, 연속적인 며칠 동안의 온도의 합이 가장 큰 값을 알아보고자 한다.

예를 들어, 아래와 같이 10일 간의 온도가 주어졌을 때,

3 -2 -4 -9 0 3 7 13 8 -3

모든 연속적인 이틀간의 온도의 합은 아래와 같다.



이때, 온도의 합이 가장 큰 값은 21이다.

또 다른 예로 위와 같은 온도가 주어졌을 때, 모든 연속적인 5일 간의 온도의 합은 아래와 같으며,



이때, 온도의 합이 가장 큰 값은 31이다.

매일 측정한 온도가 정수의 수열로 주어졌을 때, 연속적인 며칠 동안의 온도의 합이 가장 큰 값을 계산하는 프로그램을 작성하시오.
----------------------------------------------------------------------------
02 MySolution: 2559번

#include <bits/stdc++.h>
using namespace std;

int N, K; // N : 2 ~ 100,000
// K 1 ~ 99,999
int psum[100004];
int ret = -10000001;

int main(){

	cin >> N >> K;
	
	for(int i = 1; i <= N; i++){
		int input;
		cin >> input;
		psum[i] = psum[i - 1] + input;
	}
	
	for(int i = K; i <= N; i++){
		ret = max( ret, psum[i] - psum [i - K] );
	}
	
	cout << ret;

	return 0;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

03 Question: 16139번

승재는 인간-컴퓨터 상호작용에서 생체공학 설계를 공부하다가 키보드 자판이 실용적인지 궁금해졌다. 이를 알아보기 위해 승재는 다음과 같은 생각을 했다. 

'문자열에서 특정 알파벳이 몇 번 나타나는지 알아봐서 자주 나타나는 알파벳이 중지나 검지 위치에 오는 알파벳인지 확인하면 실용적인지 확인할 수 있을 것이다.'

승재를 도와 특정 문자열 
$S$, 특정 알파벳 
$\alpha$와 문자열의 구간 
$[l,r]$이 주어지면 
$S$의 
$l$번째 문자부터 
$r$번째 문자 사이에 
$\alpha$가 몇 번 나타나는지 구하는 프로그램을 작성하여라. 승재는 문자열의 문자는 
$0$번째부터 세며, 
$l$번째와 
$r$번째 문자를 포함해서 생각한다. 주의할 점은 승재는 호기심이 많기에 (통계적으로 크게 무의미하지만) 같은 문자열을 두고 질문을 
$q$번 할 것이다.
----------------------------------------------------------------------------
03 MySolution: 16139번

#include <iostream>
using namespace std;

string arr;
int sum[27][200002];

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);

	cin >> arr;

	for (int i = 0; i < arr.size(); i++) {
		if(i!=0) {
			for (int j = 0; j < 26; j++) {
				sum[j][i] += sum[j][i - 1];
			}
		}
		sum[arr[i] - 'a'][i]++;
	}

	int N;
	cin >> N;
	for (int i = 0; i < N; i++) {
		char val;
		int str, end;
		cin >> val;
		cin >> str >> end;
		
		if (str == 0) {
			cout << sum[val - 'a'][end] << "\n";
		}
		else {
			cout << sum[val - 'a'][end] - sum[val - 'a'][str - 1] << "\n";
		}
	}
	return 0;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

04 Question: 10986번

수 N개 A1, A2, ..., AN이 주어진다. 이때, 연속된 부분 구간의 합이 M으로 나누어 떨어지는 구간의 개수를 구하는 프로그램을 작성하시오.

즉, Ai + ... + Aj (i ≤ j) 의 합이 M으로 나누어 떨어지는 (i, j) 쌍의 개수를 구해야 한다.
----------------------------------------------------------------------------
04 MySolution: 10986번

#include <iostream>
// BOJ - 10986 Remainder Summation
using namespace std;

long long mod[1001];

int main(void) {
	int n, m, t;
	long long psum = 0, cnt = 0;
	ios_base::sync_with_stdio(false); cin.tie(NULL);

	cin >> n >> m;

	for (int i = 1; i <= n; i++) {
		cin >> t;
		psum += t;
		mod[psum % m]++;
	}

	for (int i = 0; i <= m; i++) 
		cnt += ((mod[i] * (mod[i] - 1)) / 2);

	cout << mod[0] + cnt;

	return 0;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

05 Question: 11660번

N×N개의 수가 N×N 크기의 표에 채워져 있다. (x1, y1)부터 (x2, y2)까지 합을 구하는 프로그램을 작성하시오. (x, y)는 x행 y열을 의미한다.

예를 들어, N = 4이고, 표가 아래와 같이 채워져 있는 경우를 살펴보자.

1	2	3	4
2	3	4	5
3	4	5	6
4	5	6	7
여기서 (2, 2)부터 (3, 4)까지 합을 구하면 3+4+5+4+5+6 = 27이고, (4, 4)부터 (4, 4)까지 합을 구하면 7이다.

표에 채워져 있는 수와 합을 구하는 연산이 주어졌을 때, 이를 처리하는 프로그램을 작성하시오.
----------------------------------------------------------------------------
05 MySolution: 11660번

#include <iostream>

using namespace std;

int arr[1025][1025],dp[1025][1025];

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int n,m;
    cin>>n>>m;
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=n;j++)
        {
            cin>>arr[i][j];
            dp[i][j] = dp[i-1][j]+dp[i][j-1] - dp[i-1][j-1]+arr[i][j];
        }
    }
    int x1,y1,x2,y2;
    int ans;
    for(int i=0;i<m;i++)
    {
        cin>>x1>>y1;
        cin>>x2>>y2;
        ans = dp[x2][y2] - dp[x1-1][y2]-dp[x2][y1-1]+dp[x1-1][y1-1];
        cout<<ans<<'\n';
    }
    return 0;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

06 Question: 25682번

지민이는 자신의 저택에서 MN개의 단위 정사각형으로 나누어져 있는 M×N 크기의 보드를 찾았다. 어떤 정사각형은 검은색으로 칠해져 있고, 나머지는 흰색으로 칠해져 있다. 지민이는 이 보드를 잘라서 K×K 크기의 체스판으로 만들려고 한다.

체스판은 검은색과 흰색이 번갈아서 칠해져 있어야 한다. 구체적으로, 각 칸이 검은색과 흰색 중 하나로 색칠되어 있고, 변을 공유하는 두 개의 사각형은 다른 색으로 칠해져 있어야 한다. 따라서 이 정의를 따르면 체스판을 색칠하는 경우는 두 가지뿐이다. 하나는 맨 왼쪽 위 칸이 흰색인 경우, 하나는 검은색인 경우이다.

보드가 체스판처럼 칠해져 있다는 보장이 없어서, 지민이는 K×K 크기의 체스판으로 잘라낸 후에 몇 개의 정사각형을 다시 칠해야겠다고 생각했다. 당연히 K×K 크기는 아무데서나 골라도 된다. 지민이가 다시 칠해야 하는 정사각형의 최소 개수를 구하는 프로그램을 작성하시오.
----------------------------------------------------------------------------
06 MySolution: 25682번

#include <iostream>

using namespace std;

void input_data(void);
void find_min(void);

int n, m, k, total_min = 2000001;
int prefix_sum[2001][2001];

int main(void)
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	input_data();
	find_min();
	cout << total_min << '\n';

	return (0);
}

void input_data(void)
{
	cin >> n >> m >> k;

	int i = 0;
	while (++i <= n)
	{
		int j = 0;
		while (++j <= m)
		{
			char color;
			cin >> color;
			if (((i + j) % 2 == 0 && color != 'B') || ((i + j) % 2 != 0 && color == 'B'))
				prefix_sum[i][j] = 1;
			prefix_sum[i][j] += prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1];
		}
	}

	return ;
}

void find_min(void)
{
	int i, j;

	i = k - 1;
	while (++i <= n)
	{
		j = k - 1;
		while (++j <= m)
		{
			int count_painting = prefix_sum[i][j] - prefix_sum[i - k][j] - prefix_sum[i][j - k] + prefix_sum[i - k][j - k];
			count_painting = min(k * k - count_painting, count_painting);
			total_min = min(total_min, count_painting);
		}
	}

	return ;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------
