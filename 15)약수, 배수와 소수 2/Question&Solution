01 Question: 1934번

두 자연수 A와 B에 대해서, A의 배수이면서 B의 배수인 자연수를 A와 B의 공배수라고 한다. 이런 공배수 중에서 가장 작은 수를 최소공배수라고 한다. 예를 들어, 6과 15의 공배수는 30, 60, 90등이 있으며, 최소 공배수는 30이다.

두 자연수 A와 B가 주어졌을 때, A와 B의 최소공배수를 구하는 프로그램을 작성하시오.
----------------------------------------------------------------------------
01 MySolution: 1934번

#include <iostream>
using namespace std;
int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int T;
	cin >> T;

	int A, B;
	for (int i = 0; i < T; i++) {
		cin >> A >> B;
		int min = 0;
		if (A >= B)
			min = B;
		else
			min = A;

		for (int j = min; j > 0; j--) {
			if (A%j == 0 && B%j==0) {
				cout << A * (B / j) << "\n";
				break;
			}
		}
	}

	return 0;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

02 Question: 13241번

정수 B에 0보다 큰 정수인 N을 곱해 정수 A를 만들 수 있다면, A는 B의 배수이다.

예:

10은 5의 배수이다 (5*2 = 10)
10은 10의 배수이다(10*1 = 10)
6은 1의 배수이다(1*6 = 6)
20은 1, 2, 4,5,10,20의 배수이다.
다른 예:

2와 5의 최소공배수는 10이고, 그 이유는 2와 5보다 작은 공배수가 없기 때문이다.
10과 20의 최소공배수는 20이다.
5와 3의 최소공배수는 15이다.
당신은 두 수에 대하여 최소공배수를 구하는 프로그램을 작성 하는 것이 목표이다.
----------------------------------------------------------------------------
02 MySolution: 13241번

#include<iostream>
 
using namespace std;
 
void swap(int &a, int &b) {
    int temp = a;
    a = b;
    b = temp;
}
 
long long gcd(int a, int b) {
    int temp;
    if (a < b)
        swap(a, b);
    while (b != 0) {
        temp = a % b;
        a = b;
        b = temp;
    }
    return a;
}
 
long long lcm(long long a, long long b) {
    return (a * b) / gcd(a, b);
}
 
 
int main() {
    long long a, b;
 
    cin >> a >> b;
    cout << lcm(a, b) << endl;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

03 Question: 1735번

분수 A/B는 분자가 A, 분모가 B인 분수를 의미한다. A와 B는 모두 자연수라고 하자.

두 분수의 합 또한 분수로 표현할 수 있다. 두 분수가 주어졌을 때, 그 합을 기약분수의 형태로 구하는 프로그램을 작성하시오. 기약분수란 더 이상 약분되지 않는 분수를 의미한다.
----------------------------------------------------------------------------
03 MySolution: 1735번

#include <iostream>
using namespace std;
long GCD(long a, long b) {
	if (b>a) return GCD(b, a);
	if (a%b == 0) return b;
	else  return GCD(b, a%b);
}
int main() {
	long up, down, up1, down1, N, M;
	cin >> up >> down >> up1 >> down1;
	N = down1 * up + up1 * down;
	M = down1 * down;
	
	cout << N/GCD(N,M) << ' ' << M/GCD(N,M);
}
----------------------------------------------------------------------------
----------------------------------------------------------------------------


04 Question: 2485번

직선으로 되어있는 도로의 한 편에 가로수가 임의의 간격으로 심어져있다. KOI 시에서는 가로수들이 모두 같은 간격이 되도록 가로수를 추가로 심는 사업을 추진하고 있다. KOI 시에서는 예산문제로 가능한 한 가장 적은 수의 나무를 심고 싶다.

편의상 가로수의 위치는 기준점으로 부터 떨어져 있는 거리로 표현되며, 가로수의 위치는 모두 양의 정수이다.

예를 들어, 가로수가 (1, 3, 7, 13)의 위치에 있다면 (5, 9, 11)의 위치에 가로수를 더 심으면 모든 가로수들의 간격이 같게 된다. 또한, 가로수가 (2, 6, 12, 18)에 있다면 (4, 8, 10, 14, 16)에 가로수를 더 심어야 한다.

심어져 있는 가로수의 위치가 주어질 때, 모든 가로수가 같은 간격이 되도록 새로 심어야 하는 가로수의 최소수를 구하는 프로그램을 작성하라. 단, 추가되는 나무는 기존의 나무들 사이에만 심을 수 있다.
----------------------------------------------------------------------------
04 MySolution: 2485번

#include <cstdio>
#include <algorithm>
#include <vector>
using namespace std;

int n, arr[100000];
vector<int> v;

int gcd(int a, int b) {
        while (b != 0) {
                int c = a % b;
                a = b;
                b = c;
        }
        return a;
}

int main() {
        int _gcd, cnt = 0;

        scanf("%d", &n);
        for (int i = 0; i < n; i++) 
                scanf("%d", &arr[i]);
        
        sort(arr, arr + n);

        for (int i = 0; i < n - 1; i++)
                v.push_back(arr[i + 1] - arr[i]);
        
        _gcd = gcd(v[0], v[1]);
        for (int i = 2; i < n; i++)
                _gcd = gcd(_gcd, v[i]);

        for (int i =0; i < n - 1; i ++)
                cnt += v[i] / _gcd - 1;
                
        printf("%d", cnt);
}
----------------------------------------------------------------------------
----------------------------------------------------------------------------


05 Question: 4134번

정수 n(0 ≤ n ≤ 4*109)가 주어졌을 때, n보다 크거나 같은 소수 중 가장 작은 소수 찾는 프로그램을 작성하시오.
----------------------------------------------------------------------------
05 MySolution: 4134번

#include <iostream>
#include <cmath>

using namespace std;

int main(){
    long long tc, n, m, ans;
    cin >> tc;
    for(int t = 0; t < tc; t++){
        cin >> n;
        bool p = (n < 3) ? 1 : 0;
        ans = (n < 3) ? 2 : n;
        while(!p){
            m = sqrt(n) + 1;
            for(int i = 2; i <= m; i++){
                if(n % i == 0) break;
                if (i == m) {
                    ans = n;
                    p = 1;
                }
            }
            n++;
        }
        cout << ans << '\n';
    }
}
----------------------------------------------------------------------------
----------------------------------------------------------------------------


06 Question: 1929번

M이상 N이하의 소수를 모두 출력하는 프로그램을 작성하시오.
----------------------------------------------------------------------------
06 MySolution: 1929번

#include <cstdio>
#include <vector>

using namespace std;

int main(void) {
    int m, n;
    scanf("%d %d", &m, &n);
    
    vector<int> arr(n + 1, 0);

    for(int i = 2; i <= n; i++) {
        arr[i] = i;
    }

    for(int i = 2; i * i <= n; i++) {
        if(arr[i] == 0) continue;
        for(int j = 2 * i; j <= n; j += i) {
            if(arr[j] == 0)  continue;
            else arr[j] = 0;
        }
    }

    for(int i = m; i <= n; i++) {
        if(arr[i] != 0) printf("%d\n", arr[i]);
    }
    return 0;
}
----------------------------------------------------------------------------
----------------------------------------------------------------------------


07 Question: 4948번

베르트랑 공준은 임의의 자연수 n에 대하여, n보다 크고, 2n보다 작거나 같은 소수는 적어도 하나 존재한다는 내용을 담고 있다.

이 명제는 조제프 베르트랑이 1845년에 추측했고, 파프누티 체비쇼프가 1850년에 증명했다.

예를 들어, 10보다 크고, 20보다 작거나 같은 소수는 4개가 있다. (11, 13, 17, 19) 또, 14보다 크고, 28보다 작거나 같은 소수는 3개가 있다. (17,19, 23)

자연수 n이 주어졌을 때, n보다 크고, 2n보다 작거나 같은 소수의 개수를 구하는 프로그램을 작성하시오. 
----------------------------------------------------------------------------
07 MySolution: 4948번

#include <iostream>
#include <cmath>
using namespace std;

int main() {
	int n, rt, cnt = 0;

	while (1) {
		cin >> n;
		if (!n)	//0 입력시 종료
			break;

		for (int i = n + 1; i <= 2 * n; i++) {
			rt = sqrt(i);
			if (rt == 1 && i != 1) {
				cnt++;
				continue;
			}
			if (i % 2) {
				for (int j = 2; j <= rt; j++) {
					if (!(i%j))
						break;
					if (j == rt) {
						cnt++;
					}
				}
			}
		}
		cout << cnt << '\n';
		cnt = 0;
	}
}
----------------------------------------------------------------------------
----------------------------------------------------------------------------


08 Question: 17103번

골드바흐의 추측: 2보다 큰 짝수는 두 소수의 합으로 나타낼 수 있다.
짝수 N을 두 소수의 합으로 나타내는 표현을 골드바흐 파티션이라고 한다. 짝수 N이 주어졌을 때, 골드바흐 파티션의 개수를 구해보자. 두 소수의 순서만 다른 것은 같은 파티션이다.
----------------------------------------------------------------------------
08 MySolution: 17103번

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

const int n = 1000000;
vector<bool> isprime(n + 1, true);

void SetPrime()
{
    for (int i = 2; i * i <= n; i++)
    {
        if (!isprime[i])
            continue;

        for (int j = i * i; j <= n; j += i)
            isprime[j] = false;
    }
}

int main()
{
    SetPrime();
    int N, n;
	cin >> N;

	while (N--)
	{
        int count = 0;
		cin >> n;
        vector<int> v;

		for (int i = 2; i < n; i++)
		{
            if (isprime[i])
                v.push_back(i);
		}

        for (auto it = v.begin(); it != v.end(); ++it)
        {
            int other = n - *it;

            if (other < *it)
                break;

            if(binary_search(it, v.end(), other))
                count++;
        }

        cout << count << '\n';
	}
}
----------------------------------------------------------------------------
----------------------------------------------------------------------------


09 Question: 13909번

서강대학교 컴퓨터공학과 실습실 R912호에는 현재 N개의 창문이 있고 또 N명의 사람이 있다. 1번째 사람은 1의 배수 번째 창문을 열려 있으면 닫고 닫혀 있으면 연다.  2번째 사람은 2의 배수 번째 창문을 열려 있으면 닫고 닫혀 있으면 연다. 이러한 행동을 N번째 사람까지 진행한 후 열려 있는 창문의 개수를 구하라. 단, 처음에 모든 창문은 닫혀 있다.

예를 들어 현재 3개의 창문이 있고 3명의 사람이 있을 때,

1번째 사람은 1의 배수인 1,2,3번 창문을 연다. (1, 1, 1)
2번째 사람은 2의 배수인 2번 창문을 닫는다. (1, 0, 1)
3번째 사람은 3의 배수인 3번 창문을 닫는다. (1, 0, 0)
결과적으로 마지막에 열려 있는 창문의 개수는 1개 이다.
----------------------------------------------------------------------------
09 MySolution: 13909번

#include<bits/stdc++.h>
#pragma warning(disable:4996)
using namespace std;
int main() {
    int n, ans = 0;
    cin >> n;
    for (int i = 1; i * i <= n; i++)
        ans++;
    cout << ans << endl;
    return 0;
}
----------------------------------------------------------------------------
----------------------------------------------------------------------------
