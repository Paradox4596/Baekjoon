01 Question: 1934번

두 자연수 A와 B에 대해서, A의 배수이면서 B의 배수인 자연수를 A와 B의 공배수라고 한다. 이런 공배수 중에서 가장 작은 수를 최소공배수라고 한다. 예를 들어, 6과 15의 공배수는 30, 60, 90등이 있으며, 최소 공배수는 30이다.

두 자연수 A와 B가 주어졌을 때, A와 B의 최소공배수를 구하는 프로그램을 작성하시오.
----------------------------------------------------------------------------
01 MySolution: 1934번

#include <iostream>
using namespace std;
int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int T;
	cin >> T;

	int A, B;
	for (int i = 0; i < T; i++) {
		cin >> A >> B;
		int min = 0;
		if (A >= B)
			min = B;
		else
			min = A;

		for (int j = min; j > 0; j--) {
			if (A%j == 0 && B%j==0) {
				cout << A * (B / j) << "\n";
				break;
			}
		}
	}

	return 0;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

02 Question: 13241번

정수 B에 0보다 큰 정수인 N을 곱해 정수 A를 만들 수 있다면, A는 B의 배수이다.

예:

10은 5의 배수이다 (5*2 = 10)
10은 10의 배수이다(10*1 = 10)
6은 1의 배수이다(1*6 = 6)
20은 1, 2, 4,5,10,20의 배수이다.
다른 예:

2와 5의 최소공배수는 10이고, 그 이유는 2와 5보다 작은 공배수가 없기 때문이다.
10과 20의 최소공배수는 20이다.
5와 3의 최소공배수는 15이다.
당신은 두 수에 대하여 최소공배수를 구하는 프로그램을 작성 하는 것이 목표이다.
----------------------------------------------------------------------------
02 MySolution: 13241번

#include<iostream>
 
using namespace std;
 
void swap(int &a, int &b) {
    int temp = a;
    a = b;
    b = temp;
}
 
long long gcd(int a, int b) {
    int temp;
    if (a < b)
        swap(a, b);
    while (b != 0) {
        temp = a % b;
        a = b;
        b = temp;
    }
    return a;
}
 
long long lcm(long long a, long long b) {
    return (a * b) / gcd(a, b);
}
 
 
int main() {
    long long a, b;
 
    cin >> a >> b;
    cout << lcm(a, b) << endl;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

03 Question: 1735번

분수 A/B는 분자가 A, 분모가 B인 분수를 의미한다. A와 B는 모두 자연수라고 하자.

두 분수의 합 또한 분수로 표현할 수 있다. 두 분수가 주어졌을 때, 그 합을 기약분수의 형태로 구하는 프로그램을 작성하시오. 기약분수란 더 이상 약분되지 않는 분수를 의미한다.
----------------------------------------------------------------------------
03 MySolution: 1735번

#include <iostream>
using namespace std;
long GCD(long a, long b) {
	if (b>a) return GCD(b, a);
	if (a%b == 0) return b;
	else  return GCD(b, a%b);
}
int main() {
	long up, down, up1, down1, N, M;
	cin >> up >> down >> up1 >> down1;
	N = down1 * up + up1 * down;
	M = down1 * down;
	
	cout << N/GCD(N,M) << ' ' << M/GCD(N,M);
}
----------------------------------------------------------------------------
----------------------------------------------------------------------------


04 Question: 2485번

직선으로 되어있는 도로의 한 편에 가로수가 임의의 간격으로 심어져있다. KOI 시에서는 가로수들이 모두 같은 간격이 되도록 가로수를 추가로 심는 사업을 추진하고 있다. KOI 시에서는 예산문제로 가능한 한 가장 적은 수의 나무를 심고 싶다.

편의상 가로수의 위치는 기준점으로 부터 떨어져 있는 거리로 표현되며, 가로수의 위치는 모두 양의 정수이다.

예를 들어, 가로수가 (1, 3, 7, 13)의 위치에 있다면 (5, 9, 11)의 위치에 가로수를 더 심으면 모든 가로수들의 간격이 같게 된다. 또한, 가로수가 (2, 6, 12, 18)에 있다면 (4, 8, 10, 14, 16)에 가로수를 더 심어야 한다.

심어져 있는 가로수의 위치가 주어질 때, 모든 가로수가 같은 간격이 되도록 새로 심어야 하는 가로수의 최소수를 구하는 프로그램을 작성하라. 단, 추가되는 나무는 기존의 나무들 사이에만 심을 수 있다.
----------------------------------------------------------------------------
04 MySolution: 2485번

#include <cstdio>
#include <algorithm>
#include <vector>
using namespace std;

int n, arr[100000];
vector<int> v;

int gcd(int a, int b) {
        while (b != 0) {
                int c = a % b;
                a = b;
                b = c;
        }
        return a;
}

int main() {
        int _gcd, cnt = 0;

        scanf("%d", &n);
        for (int i = 0; i < n; i++) 
                scanf("%d", &arr[i]);
        
        sort(arr, arr + n);

        for (int i = 0; i < n - 1; i++)
                v.push_back(arr[i + 1] - arr[i]);
        
        _gcd = gcd(v[0], v[1]);
        for (int i = 2; i < n; i++)
                _gcd = gcd(_gcd, v[i]);

        for (int i =0; i < n - 1; i ++)
                cnt += v[i] / _gcd - 1;
                
        printf("%d", cnt);
}
----------------------------------------------------------------------------
----------------------------------------------------------------------------
