01 Question: 9935번

상근이는 문자열에 폭발 문자열을 심어 놓았다. 폭발 문자열이 폭발하면 그 문자는 문자열에서 사라지며, 남은 문자열은 합쳐지게 된다.

폭발은 다음과 같은 과정으로 진행된다.

문자열이 폭발 문자열을 포함하고 있는 경우에, 모든 폭발 문자열이 폭발하게 된다. 남은 문자열을 순서대로 이어 붙여 새로운 문자열을 만든다.
새로 생긴 문자열에 폭발 문자열이 포함되어 있을 수도 있다.
폭발은 폭발 문자열이 문자열에 없을 때까지 계속된다.
상근이는 모든 폭발이 끝난 후에 어떤 문자열이 남는지 구해보려고 한다. 남아있는 문자가 없는 경우가 있다. 이때는 "FRULA"를 출력한다.

폭발 문자열은 같은 문자를 두 개 이상 포함하지 않는다.
----------------------------------------------------------------------------
01 MySolution: 9935번

#include<iostream>
#include<string.h>
using namespace std;
int main(){
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    string a;
    string b;
    string t = "";
    cin >> a >> b;
    int a_len = a.length();
    int b_len = b.length();
    for (int i = 0; i < a.length(); i++)
    {
        t += a[i];
        if(t.length()>=b_len){ 
            bool flag = true; 
            for (int j = 0; j < b_len; j++){ 
                if(t[t.length()-b_len+j] != b[j]){
                    flag = false;
                    break;
                } 
            }
 
            if(flag) 
                t.erase(t.end() - b_len, t.end());
        }
    }
        if (t.empty()) 
            cout << "FRULA" << '\n';
        else
            cout << t << '\n';
    return 0;
}


----------------------------------------------------------------------------
----------------------------------------------------------------------------

02 Question: 17298번

크기가 N인 수열 A = A1, A2, ..., AN이 있다. 수열의 각 원소 Ai에 대해서 오큰수 NGE(i)를 구하려고 한다. Ai의 오큰수는 오른쪽에 있으면서 Ai보다 큰 수 중에서 가장 왼쪽에 있는 수를 의미한다. 그러한 수가 없는 경우에 오큰수는 -1이다.

예를 들어, A = [3, 5, 2, 7]인 경우 NGE(1) = 5, NGE(2) = 7, NGE(3) = 7, NGE(4) = -1이다. A = [9, 5, 4, 8]인 경우에는 NGE(1) = -1, NGE(2) = 8, NGE(3) = 8, NGE(4) = -1이다.
----------------------------------------------------------------------------
02 MySolution: 17298번

#include <stack>
using namespace std;

int a[1000001];
int nge[1000001];
stack<int> s;

int main(){
    int n;
    cin>>n;
    for(int i=0; i<n; i++) cin>>a[i];

    for(int i=0; i<n; i++){
        while(!s.empty() && a[s.top()] < a[i]){
            nge[s.top()] = a[i];
            s.pop();
        }
        s.push(i);
    }

    while(!s.empty()){
        nge[s.top()] = -1;
        s.pop();
    }

    for(int i=0; i<n; i++) cout<<nge[i]<<" ";

    return 0;
}


----------------------------------------------------------------------------
----------------------------------------------------------------------------

03 Question: 17299번

크기가 N인 수열 A = A1, A2, ..., AN이 있다. 수열의 각 원소 Ai에 대해서 오등큰수 NGF(i)를 구하려고 한다.

Ai가 수열 A에서 등장한 횟수를 F(Ai)라고 했을 때, Ai의 오등큰수는 오른쪽에 있으면서 수열 A에서 등장한 횟수가 F(Ai)보다 큰 수 중에서 가장 왼쪽에 있는 수를 의미한다. 그러한 수가 없는 경우에 오등큰수는 -1이다.

예를 들어, A = [1, 1, 2, 3, 4, 2, 1]인 경우 F(1) = 3, F(2) = 2, F(3) = 1, F(4) = 1이다. A1의 오른쪽에 있으면서 등장한 횟수가 3보다 큰 수는 없기 때문에, NGF(1) = -1이다. A3의 경우에는 A7이 오른쪽에 있으면서 F(A3=2) < F(A7=1) 이기 때문에, NGF(3) = 1이다. NGF(4) = 2, NGF(5) = 2, NGF(6) = 1 이다.
----------------------------------------------------------------------------
03 MySolution: 17299번

#include <iostream>
#include <stack>

using namespace std;

const int MAX = 1000001;

int N;
int A[MAX], F[MAX], NFG[MAX];

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    
    cin >> N;
    for (int i=0; i<N; i++) {
        cin >> A[i];
        F[A[i]]++;
    }
    
    stack<int> s;
    
    for (int i=N-1; i>=0; i--) {
        while (!s.empty() && F[s.top()] <= F[A[i]]) s.pop();
        
        if (s.empty()) NFG[i] = -1;
        else NFG[i] = s.top();
        
        s.push(A[i]);
    }
    
    for (int i=0; i<N; i++) cout << NFG[i] << " ";
    
    return 0;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

04 Question: 1725번

히스토그램에 대해서 알고 있는가? 히스토그램은 아래와 같은 막대그래프를 말한다.



각 칸의 간격은 일정하고, 높이는 어떤 정수로 주어진다. 위 그림의 경우 높이가 각각 2 1 4 5 1 3 3이다.

이러한 히스토그램의 내부에 가장 넓이가 큰 직사각형을 그리려고 한다. 아래 그림의 빗금 친 부분이 그 예이다. 이 직사각형의 밑변은 항상 히스토그램의 아랫변에 평행하게 그려져야 한다.



주어진 히스토그램에 대해, 가장 큰 직사각형의 넓이를 구하는 프로그램을 작성하시오.
----------------------------------------------------------------------------
04 MySolution: 1725번

#include <iostream>
#include <vector>
#include <stack>
#define N 111111

using namespace std;
typedef long long ll;

struct s1 {
	int idx;
	ll h;
};

int n;
int idx;
ll ans = 0;
ll arr[N];

int main() {
	cin >> n;
	stack<s1> s;

	arr[n] = 0;

	for (int i = 0; i <= n; i++) {
		if (i < n) cin >> arr[i];

		idx = i;

		while (!s.empty() && s.top().h >= arr[i]) {
			idx = s.top().idx;
			ll w = ll(i) - ll(idx);
			ans = max(ans, w * s.top().h);
			s.pop();
		} 
		
		s.push({ idx, arr[i] });
	} 
	cout << ans << '\n';
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------
