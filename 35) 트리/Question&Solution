01 Question: 11725번

정수 X에 사용할 수 있는 연산은 다음과 같이 세 가지 이다.

X가 3으로 나누어 떨어지면, 3으로 나눈다.
X가 2로 나누어 떨어지면, 2로 나눈다.
1을 뺀다.
정수 N이 주어졌을 때, 위와 같은 연산 세 개를 적절히 사용해서 1을 만들려고 한다. 연산을 사용하는 횟수의 최솟값을 출력하시오.
----------------------------------------------------------------------------
01 MySolution: 11725번

#include <iostream>
#include <vector>

using namespace std;
#define MAX 100001

int N;
int arr[MAX];
bool visited[MAX];
vector<int> v[MAX];

void dfs(int k) {
    visited[k]=true;
    for(int i=0;i<v[k].size();i++) {
        int next = v[k][i];
        if(!visited[next]) {
            arr[next]=k;
            dfs(next);
        }
    }
}

int main() {
    cin >> N;

    for(int i=0;i<N;i++) {
        int x,y;
        cin >> x >> y;
        v[x].push_back(y);
        v[y].push_back(x);
    }

    dfs(1);

    for(int i=2;i<=N;i++) cout << arr[i] << "\n";
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

02 Question: 1167번

트리의 지름이란, 트리에서 임의의 두 점 사이의 거리 중 가장 긴 것을 말한다. 트리의 지름을 구하는 프로그램을 작성하시오.
----------------------------------------------------------------------------
02 MySolution: 1167번

#include <iostream>
#include <vector>
#include <queue>

using namespace std;

int V;
vector<pair<int,int>> v[100001];
bool visited[100001] = {false,};
int selected;
int dist = 0;

void dfs(int x, int cnt){


    if(dist < cnt){
        selected = x;
        dist = cnt;
    }


    for(int i = 0; i < v[x].size(); i++){
        int nx = v[x][i].first;
        int cost = v[x][i].second;
        if(!visited[nx]){
            visited[nx] = true;
            dfs(nx,cnt+cost);
            visited[nx] = false;
        }
    }
}
int main(){
    cin.tie(0); cout.tie(0); ios::sync_with_stdio(false);
    cin >> V;
    for(int i = 1; i <= V; i++){
        int s, e, c;
        cin >> s;
        while(true){
            cin >> e;
            if(e == -1) break;
            cin >> c;
            v[s].push_back({e,c});
        }
    }
    visited[1] = true;
    dfs(1,0);
    fill(visited,visited+100001,false);
    dist = 0;
    visited[selected] = true; 
    dfs(selected,0);
    cout << dist;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

03 Question: 1967번

트리(tree)는 사이클이 없는 무방향 그래프이다. 트리에서는 어떤 두 노드를 선택해도 둘 사이에 경로가 항상 하나만 존재하게 된다. 트리에서 어떤 두 노드를 선택해서 양쪽으로 쫙 당길 때, 가장 길게 늘어나는 경우가 있을 것이다. 이럴 때 트리의 모든 노드들은 이 두 노드를 지름의 끝 점으로 하는 원 안에 들어가게 된다.

이런 두 노드 사이의 경로의 길이를 트리의 지름이라고 한다. 정확히 정의하자면 트리에 존재하는 모든 경로들 중에서 가장 긴 것의 길이를 말한다.

입력으로 루트가 있는 트리를 가중치가 있는 간선들로 줄 때, 트리의 지름을 구해서 출력하는 프로그램을 작성하시오. 아래와 같은 트리가 주어진다면 트리의 지름은 45가 된다.

트리의 노드는 1부터 n까지 번호가 매겨져 있다.
----------------------------------------------------------------------------
03 MySolution: 1967번

#include<bits/stdc++.h>
using namespace std;

vector<pair<int,int>> node[10002];
bool visited[10002] = {false,};
int result = 0;
int endPoint = 0;

void dfs(int p, int len){
  if(visited[p]) return;
  
  visited[p] = true;
  if(result < len){
    result = len;
    endPoint = p;
  }
  
  for(int i=0; i<node[p].size(); i++){
    dfs(node[p][i].first, len + node[p][i].second);
  }
}

int main(){
  ios::sync_with_stdio(0);
  cin.tie(0); cout.tie(0);
  
  int n;
  cin>>n;
  
  for(int i=0; i<n-1; i++){
    int a,b,c;
    cin>>a>>b>>c;
    node[a].push_back({b,c});
    node[b].push_back({a,c});
  }
  
  dfs(1,0);
  
  result = 0;
  memset(visited, false, sizeof(visited));
  
  dfs(endPoint, 0);
  cout<<result;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

04 Question: 1991번

이진 트리를 입력받아 전위 순회(preorder traversal), 중위 순회(inorder traversal), 후위 순회(postorder traversal)한 결과를 출력하는 프로그램을 작성하시오.



예를 들어 위와 같은 이진 트리가 입력되면,

전위 순회한 결과 : ABDCEFG // (루트) (왼쪽 자식) (오른쪽 자식)
중위 순회한 결과 : DBAECFG // (왼쪽 자식) (루트) (오른쪽 자식)
후위 순회한 결과 : DBEGFCA // (왼쪽 자식) (오른쪽 자식) (루트)
가 된다.
----------------------------------------------------------------------------
04 MySolution: 1991번

#include <iostream>
using namespace std;
pair<char, char> arr[26];
int N;
void preorder(char x)
{
	if (x!='.')
	{
		cout << x;
		preorder(arr[x-'A'].first);
		preorder(arr[x-'A'].second);
	}
}

void inorder(char x)
{
	if (x != '.')
	{
		inorder(arr[x - 'A'].first);
		cout << x;
		inorder(arr[x - 'A'].second);
	}
}
void postorder(char x)
{
	if (x != '.')
	{
		postorder(arr[x - 'A'].first);
		postorder(arr[x - 'A'].second);
		cout << x;
	}
}
int main(void)
{
	cin >> N;
	for (int i = 0; i < N; i++)
	{
		char parent, left, right;
		cin >> parent >> left >> right;

		arr[(parent - 'A')].first = left;
		arr[(parent - 'A')].second=right;
	}
	preorder('A');
	cout << endl;
	inorder('A');
	cout << endl;
	postorder('A');
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

05 Question: 2263번

n개의 정점을 갖는 이진 트리의 정점에 1부터 n까지의 번호가 중복 없이 매겨져 있다. 이와 같은 이진 트리의 인오더와 포스트오더가 주어졌을 때, 프리오더를 구하는 프로그램을 작성하시오.
----------------------------------------------------------------------------
05 MySolution: 2263번

#include <iostream>
#include <vector>
using namespace std;
vector<int> inorder;
vector<int> postorder;
int Index[100001];
int N,root;
void preorder(int inStart, int inEnd, int postStart, int postEnd)
{
	if (inStart > inEnd || postStart > postEnd)
		return;

	int root = postorder[postEnd];
	int rootIndex = Index[root];
	int leftSize = rootIndex - inStart;
	int rightSize = inEnd - rootIndex;

	cout << root << " ";

	preorder(inStart, rootIndex-1, postStart, postStart + leftSize-1);
	preorder(rootIndex + 1, inEnd, postStart + leftSize, postEnd - 1);
}

int find(int x)
{
	for (int i = 0; i < N; i++)
	{
		if (inorder[i] == x)
		{
			return i;
		}
	}
}
int main(void)
{
	cin >> N;
	for (int i = 0; i < N; i++)
	{
		int num;
		cin >> num;
		inorder.push_back(num);
		Index[num] = i;
	}
	for (int i = 0; i < N; i++)
	{
		int num;
		cin >> num;
		postorder.push_back(num);
	}
	preorder(0,N-1,0,N-1);

}

----------------------------------------------------------------------------
----------------------------------------------------------------------------
