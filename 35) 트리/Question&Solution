01 Question: 11725번

정수 X에 사용할 수 있는 연산은 다음과 같이 세 가지 이다.

X가 3으로 나누어 떨어지면, 3으로 나눈다.
X가 2로 나누어 떨어지면, 2로 나눈다.
1을 뺀다.
정수 N이 주어졌을 때, 위와 같은 연산 세 개를 적절히 사용해서 1을 만들려고 한다. 연산을 사용하는 횟수의 최솟값을 출력하시오.
----------------------------------------------------------------------------
01 MySolution: 11725번

#include <iostream>
#include <vector>

using namespace std;
#define MAX 100001

int N;
int arr[MAX];
bool visited[MAX];
vector<int> v[MAX];

void dfs(int k) {
    visited[k]=true;
    for(int i=0;i<v[k].size();i++) {
        int next = v[k][i];
        if(!visited[next]) {
            arr[next]=k;
            dfs(next);
        }
    }
}

int main() {
    cin >> N;

    for(int i=0;i<N;i++) {
        int x,y;
        cin >> x >> y;
        v[x].push_back(y);
        v[y].push_back(x);
    }

    dfs(1);

    for(int i=2;i<=N;i++) cout << arr[i] << "\n";
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

02 Question: 1167번

트리의 지름이란, 트리에서 임의의 두 점 사이의 거리 중 가장 긴 것을 말한다. 트리의 지름을 구하는 프로그램을 작성하시오.
----------------------------------------------------------------------------
02 MySolution: 1167번

#include <iostream>
#include <vector>
#include <queue>

using namespace std;

int V;
vector<pair<int,int>> v[100001];
bool visited[100001] = {false,};
int selected;
int dist = 0;

void dfs(int x, int cnt){


    if(dist < cnt){
        selected = x;
        dist = cnt;
    }


    for(int i = 0; i < v[x].size(); i++){
        int nx = v[x][i].first;
        int cost = v[x][i].second;
        if(!visited[nx]){
            visited[nx] = true;
            dfs(nx,cnt+cost);
            visited[nx] = false;
        }
    }
}
int main(){
    cin.tie(0); cout.tie(0); ios::sync_with_stdio(false);
    cin >> V;
    for(int i = 1; i <= V; i++){
        int s, e, c;
        cin >> s;
        while(true){
            cin >> e;
            if(e == -1) break;
            cin >> c;
            v[s].push_back({e,c});
        }
    }
    visited[1] = true;
    dfs(1,0);
    fill(visited,visited+100001,false);
    dist = 0;
    visited[selected] = true; 
    dfs(selected,0);
    cout << dist;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------
