01 Question: 1753번

방향그래프가 주어지면 주어진 시작점에서 다른 모든 정점으로의 최단 경로를 구하는 프로그램을 작성하시오. 단, 모든 간선의 가중치는 10 이하의 자연수이다.
----------------------------------------------------------------------------
01 MySolution: 1753번

#include <iostream>
#include <queue>
#include <cstring>
#include <vector>
using namespace std;
int INF = 98765432; 
int dp[20003];
vector<pair<int, int>> v[20003];
void fc(int st){
    memset(dp, INF, sizeof(dp));
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push({0, st});
    dp[st] = 0;
    while(!pq.empty()){
        int x = pq.top().second;
        int cost = pq.top().first;
        pq.pop();
        for (int i = 0; i < v[x].size();i++){
            int nx = v[x][i].first;
            int ncost = cost + v[x][i].second;
 
            if(dp[nx] > ncost){
                pq.push({ncost, nx}); 
                dp[nx] = ncost;
            }
        }
    }
}
int main(){
    int V, E, K;
    cin >> V >> E >> K;
    int a1, a2, a3;
    for (int i = 0; i < E;i++){
        cin >> a1 >> a2 >> a3;
        v[a1].push_back({a2, a3});
    }
    fc(K);
    for (int i = 1; i <= V;i++){
        if(dp[i] < INF)
            cout << dp[i] << '\n';
        else
            cout << "INF" << '\n';
    }
    return 0;
}


----------------------------------------------------------------------------
----------------------------------------------------------------------------

02 Question: 1504번

방향성이 없는 그래프가 주어진다. 세준이는 1번 정점에서 N번 정점으로 최단 거리로 이동하려고 한다. 또한 세준이는 두 가지 조건을 만족하면서 이동하는 특정한 최단 경로를 구하고 싶은데, 그것은 바로 임의로 주어진 두 정점은 반드시 통과해야 한다는 것이다.

세준이는 한번 이동했던 정점은 물론, 한번 이동했던 간선도 다시 이동할 수 있다. 하지만 반드시 최단 경로로 이동해야 한다는 사실에 주의하라. 1번 정점에서 N번 정점으로 이동할 때, 주어진 두 정점을 반드시 거치면서 최단 경로로 이동하는 프로그램을 작성하시오.
----------------------------------------------------------------------------
02 MySolution: 1504번

#include <iostream>
#include <queue>
#include <vector>
#include <cstring>
using namespace std;
int INF = 98765432;
vector<pair<int, int>> v[802];
int dist[803];
void bfs(int a)
{
    memset(dist, INF, sizeof(dist));
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> q;
    q.push(make_pair(0, a));
    dist[a] = 0;
    while (!q.empty())
    {
        int sum_distance = q.top().first;
        int x = q.top().second;
        q.pop();
        
        if(dist[x] < sum_distance)
            continue;
        for (int i = 0; i < v[x].size(); i++){
            int nx = v[x][i].first;
            int ncost = sum_distance + v[x][i].second;
 
            if(dist[nx] > ncost){
                q.push({ncost, nx});
                dist[nx] = ncost;
            }
        }
    }
}
int mn(int a, int b){
    if(a<b)
        return a;
    else
        return b;
}
int main(){
    int n, e;
    cin >> n >> e;
    int a1,a2,a3;
    for (int i = 0; i < e; i++){
        cin >> a1 >> a2 >> a3;
        v[a1].push_back({a2, a3});
        v[a2].push_back({a1, a3});
    }
    int dt1, dt2;
    cin >> dt1 >> dt2;
    
    bfs(1);
    int To_dt1 = dist[dt1];
    int To_dt2 = dist[dt2];
 
    bfs(dt1);
    int dt1_To_dt2 = dist[dt2];
    int dt1_To_n = dist[n];
 
    bfs(dt2);
    int dt2_To_n = dist[n];
 
    int result;
 
    result = mn(INF, To_dt1 + dt1_To_dt2 + dt2_To_n);
    result = mn(result, To_dt2 + dt1_To_dt2 + dt1_To_n);
    if(result >= INF)
        cout << -1;
    else
        cout << result;
    return 0;
}


----------------------------------------------------------------------------
----------------------------------------------------------------------------

03 Question: 13549번

수빈이는 동생과 숨바꼭질을 하고 있다. 수빈이는 현재 점 N(0 ≤ N ≤ 100,000)에 있고, 동생은 점 K(0 ≤ K ≤ 100,000)에 있다. 수빈이는 걷거나 순간이동을 할 수 있다. 만약, 수빈이의 위치가 X일 때 걷는다면 1초 후에 X-1 또는 X+1로 이동하게 된다. 순간이동을 하는 경우에는 0초 후에 2*X의 위치로 이동하게 된다.

수빈이와 동생의 위치가 주어졌을 때, 수빈이가 동생을 찾을 수 있는 가장 빠른 시간이 몇 초 후인지 구하는 프로그램을 작성하시오.
----------------------------------------------------------------------------
03 MySolution: 13549번

#include <iostream>
#include <vector>
#include <queue>
using namespace std;

int startSubinPoint, broPoint;
int ans;
bool visit[100001];

void dijikstra() {
	priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> pq;
	pq.push({ 0, startSubinPoint });
	while (!pq.empty()) {
		int curTime = pq.top().first;
		int curPoint = pq.top().second;
		pq.pop();

		if (visit[curPoint]) { continue; }

		visit[curPoint] = true;

		if (curPoint == broPoint) {
			ans = curTime;
			return;
		}

		if (curPoint + 1 <= 100000) {
			pq.push({ curTime + 1, curPoint + 1 });
		}

		if (curPoint - 1 >= 0) {
			pq.push({ curTime + 1, curPoint - 1 });
		}

		if (curPoint * 2 <= 100000) {
			pq.push({ curTime, curPoint * 2 });
		}
	}
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	cin >> startSubinPoint >> broPoint;

	dijikstra();

	cout << ans;

	return 0;
}


----------------------------------------------------------------------------
----------------------------------------------------------------------------

04 Question: 9370번

(취익)B100 요원, 요란한 옷차림을 한 서커스 예술가 한 쌍이 한 도시의 거리들을 이동하고 있다. 너의 임무는 그들이 어디로 가고 있는지 알아내는 것이다. 우리가 알아낸 것은 그들이 s지점에서 출발했다는 것, 그리고 목적지 후보들 중 하나가 그들의 목적지라는 것이다. 그들이 급한 상황이기 때문에 목적지까지 우회하지 않고 최단거리로 갈 것이라 확신한다. 이상이다. (취익)

어휴! (요란한 옷차림을 했을지도 모를) 듀오가 어디에도 보이지 않는다. 다행히도 당신은 후각이 개만큼 뛰어나다. 이 후각으로 그들이 g와 h 교차로 사이에 있는 도로를 지나갔다는 것을 알아냈다.

이 듀오는 대체 어디로 가고 있는 것일까?



예제 입력의 두 번째 케이스를 시각화한 것이다. 이 듀오는 회색 원에서 두 검은 원 중 하나로 가고 있고 점선으로 표시된 도로에서 냄새를 맡았다. 따라서 그들은 6으로 향하고 있다.
----------------------------------------------------------------------------
04 MySolution: 9370번

#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <algorithm>
#include <math.h>
#pragma warning(disable:4996)

using namespace std;
#define INF 1234567890

struct Node {
	int end;
	int cost;
	Node(int X, int Y) :end(X), cost(Y) {}
};
struct compare {
	bool operator()(Node a, Node b) {
		return a.cost > b.cost;
	}
};


vector<Node> vertex[2001];
vector<int> destination;
vector<int> Dist_S;
vector<int> Dist_G;
vector<int> Dist_H;

void Dijkstra(int n, int start, vector<int> &dist) {
	priority_queue<Node, vector<Node>, compare> pq;
	dist.assign(n + 1, INF);
	dist[start] = 0;
	pq.push(Node(start, dist[start]));

	while (!pq.empty()) {
		Node temp = pq.top();
		int cur = temp.end;
		int cost = temp.cost;
		pq.pop();

		for (int i = 0; i < vertex[cur].size(); i++) {
			temp = vertex[cur][i];
			int next = temp.end;
			int next_cost = cost + temp.cost;
			if (dist[next] > next_cost) {
				dist[next] = next_cost;
				pq.push(Node(next, next_cost));
			}
		}
	}
}

int main() {
	int tc;
	cin >> tc;
	while (tc--) {
		int n, m, t;
		cin >> n >> m >> t;
		int s, g, h;
		cin >> s >> g >> h;

		for (int i = 0; i < m; i++) {
			int start, end, cost;
			scanf("%d %d %d", &start, &end, &cost);
			vertex[start].push_back(Node(end, cost));
			vertex[end].push_back(Node(start, cost));
		}

		for (int i = 0; i < t; i++) {
			int dest;
			scanf("%d", &dest);
			destination.push_back(dest);
		}
		sort(destination.begin(), destination.end());

		Dijkstra(n, s, Dist_S);
		Dijkstra(n, g, Dist_G);
		Dijkstra(n, h, Dist_H);

		for (int i = 0; i < destination.size(); i++) {
			int Dest = destination[i];
			if (Dist_S[Dest] == Dist_S[g] + Dist_G[h] + Dist_H[Dest])
				cout << Dest << ' ';
			else if (Dist_S[Dest] == Dist_S[h] + Dist_G[h] + Dist_G[Dest])
				cout << Dest << ' ';
		}
		cout << '\n';

		for (int i = 0; i <= n; i++)
			vertex[i].clear();

		destination.clear();
		Dist_S.clear();
		Dist_G.clear();
		Dist_H.clear();
	}

	return 0;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

05 Question: 11657번

N개의 도시가 있다. 그리고 한 도시에서 출발하여 다른 도시에 도착하는 버스가 M개 있다. 각 버스는 A, B, C로 나타낼 수 있는데, A는 시작도시, B는 도착도시, C는 버스를 타고 이동하는데 걸리는 시간이다. 시간 C가 양수가 아닌 경우가 있다. C = 0인 경우는 순간 이동을 하는 경우, C < 0인 경우는 타임머신으로 시간을 되돌아가는 경우이다.

1번 도시에서 출발해서 나머지 도시로 가는 가장 빠른 시간을 구하는 프로그램을 작성하시오.
----------------------------------------------------------------------------
05 MySolution: 11657번

#include <vector>
#include <algorithm>
#include <iostream>
using namespace std;
#define INF 2100000000

int N, M, x, y, z;
long long dist[501];
bool cycle;

vector <pair <int, int>> edge[501];

void bellman_ford() {
	fill(dist, dist + N + 1, INF);
	dist[1] = 0;

	for (int k = 1; k <= N; k++) {
		for (int i = 1; i <= N; i++) {
			for (int j = 0; j < edge[i].size(); j++) {
				int next = edge[i][j].first;
				int nextcost = edge[i][j].second;

				if (dist[i] != INF && dist[next] > dist[i] + nextcost) {
					dist[next] = dist[i] + nextcost;
					if (k == N) cycle = true;
				}
			}
		}
	}
	if (cycle) cout << -1;
	else {
		for (int i = 2; i <= N; i++)
			cout << (dist[i] != INF ? dist[i] : -1) << "\n";
	}
}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);

	cin >> N >> M;
	for (int i = 0; i < M; i++) {
		cin >> x >> y >> z;
		edge[x].push_back({ y, z });
	}
	bellman_ford();
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

06 Question: 11404번

n(2 ≤ n ≤ 100)개의 도시가 있다. 그리고 한 도시에서 출발하여 다른 도시에 도착하는 m(1 ≤ m ≤ 100,000)개의 버스가 있다. 각 버스는 한 번 사용할 때 필요한 비용이 있다.

모든 도시의 쌍 (A, B)에 대해서 도시 A에서 B로 가는데 필요한 비용의 최솟값을 구하는 프로그램을 작성하시오.
----------------------------------------------------------------------------
06 MySolution: 11404번

#include <iostream>
#include <algorithm>
#define INF 987654321
using namespace std;

int n;
int dp[101][101];
int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	cin >> n;
	int m;
	cin >> m;
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= n; j++) {
			if (i == j)
				dp[i][j] = 0;
			else
				dp[i][j] = INF;
		}
	}
	for (int i = 0; i < m; i++) {
		int from, to, cost;
		cin >> from >> to >> cost;
		dp[from][to] = min(dp[from][to],cost);
	}
	for (int k = 1; k <=n; k++) {
		for (int i = 1; i <=n ; i++) {
			for (int j = 1; j <= n; j++) {
				dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j]);
			}
		}
	}
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= n; j++) {
			if (dp[i][j] == INF) {
				cout << 0 << ' ';
				continue;
			}
			cout << dp[i][j] << ' ';
		}
		cout << '\n';
	}
	return 0;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

07 Question: 1956번

V개의 마을와 E개의 도로로 구성되어 있는 도시가 있다. 도로는 마을과 마을 사이에 놓여 있으며, 일방 통행 도로이다. 마을에는 편의상 1번부터 V번까지 번호가 매겨져 있다고 하자.

당신은 도로를 따라 운동을 하기 위한 경로를 찾으려고 한다. 운동을 한 후에는 다시 시작점으로 돌아오는 것이 좋기 때문에, 우리는 사이클을 찾기를 원한다. 단, 당신은 운동을 매우 귀찮아하므로, 사이클을 이루는 도로의 길이의 합이 최소가 되도록 찾으려고 한다.

도로의 정보가 주어졌을 때, 도로의 길이의 합이 가장 작은 사이클을 찾는 프로그램을 작성하시오. 두 마을을 왕복하는 경우도 사이클에 포함됨에 주의한다.
----------------------------------------------------------------------------
07 MySolution: 1956번

#include <vector>
#include <algorithm>
#include <iostream>
using namespace std;

int V, E, a, b, c;
int arr[401][401];
const int INF = 1e9;

void floyd() {
	for (int k = 1; k <= V; k++) {
		for (int i = 1; i <= V; i++) {
			for (int j = 1; j <= V; j++) {
				if (arr[i][j] > arr[i][k] + arr[k][j]) {
					arr[i][j] = arr[i][k] + arr[k][j];
				}
			}
		}
	}
}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);

	cin >> V >> E;
	for (int i = 1; i <= V; i++) {
		for (int j = 1; j <= V; j++) {
			if (i != j) arr[i][j] = INF;
		}
	}
	for (int i = 0; i < E; i++) {
		cin >> a >> b >> c;
		arr[a][b] = c;
	}
	floyd();

	int res = INF;
	for (int i = 1; i <= V; i++) {
		for (int j = 1; j <= V; j++) {
			if (i == j) continue;
			res = min(res, arr[i][j] + arr[j][i]);
		}
	}
	cout << (res == INF ? -1 : res);
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------
